{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/ethan/Sites/wpx/wesbos-hooks/frontend/components/TakeMyMoney.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CREATE_ORDER_MUTATION($token: String!) {\\n    createOrder(token: $token) {\\n      id\\n      charge\\n      total\\n      items {\\n        id\\n        title\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { Mutation } from \"react-apollo\";\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\nimport gql from \"graphql-tag\";\nimport calcTotalPrice from \"../lib/calcTotalPrice\";\nimport Error from \"./ErrorMessage\";\nimport User, { CURRENT_USER_QUERY } from \"./User\";\nvar CREATE_ORDER_MUTATION = gql(_templateObject());\n\nvar TakeMyMoney = function TakeMyMoney(props) {\n  var totalItems = function totalItems(me) {\n    return me.cart.reduce(function (tally, cartItem) {\n      return tally + cartItem.quantity;\n    }, 0);\n  };\n\n  var onToken =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(res, createOrder) {\n      var order;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              NProgress.start(); // manually call the mutation once we have the stripe token\n\n              _context.next = 3;\n              return createOrder({\n                variables: {\n                  token: res.id\n                }\n              })[\"catch\"](function (err) {\n                alert(err.message);\n              });\n\n            case 3:\n              order = _context.sent;\n              Router.push({\n                pathname: '/order',\n                query: {\n                  id: order.data.createOrder.id\n                }\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onToken(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(User, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, function (_ref2) {\n    var me = _ref2.data.me;\n    return __jsx(Mutation, {\n      mutation: CREATE_ORDER_MUTATION,\n      refetchQueries: [{\n        query: CURRENT_USER_QUERY\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, function (createOrder) {\n      return __jsx(StripeCheckout, {\n        amount: calcTotalPrice(me.cart),\n        name: \"Sick Fits\",\n        description: \"Your order of \".concat(totalItems(me), \" items\"),\n        stripeKey: \"pk_test_s5G4igMtK9KvmQtbRd0L18yR00ALa4imnQ\",\n        image: me.cart.length && me.cart[0].item && me.cart[0].item.image,\n        currency: \"USD\",\n        email: me.email,\n        token: function token(res) {\n          return onToken(res, createOrder);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }, props.children);\n    });\n  });\n};\n\nexport default TakeMyMoney;","map":{"version":3,"sources":["/Users/ethan/Sites/wpx/wesbos-hooks/frontend/components/TakeMyMoney.js"],"names":["StripeCheckout","Mutation","Router","NProgress","gql","calcTotalPrice","Error","User","CURRENT_USER_QUERY","CREATE_ORDER_MUTATION","TakeMyMoney","props","totalItems","me","cart","reduce","tally","cartItem","quantity","onToken","res","createOrder","start","variables","token","id","err","alert","message","order","push","pathname","query","data","length","item","image","email","children"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,cAAP,MAA2B,uBAA3B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,IAAeC,kBAAf,QAAyC,QAAzC;AAGA,IAAMC,qBAAqB,GAAGL,GAAH,mBAA3B;;AAcA,IAAMM,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAC3B,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,EAAE;AAAA,WACnBA,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAe,UAACC,KAAD,EAAQC,QAAR;AAAA,aAAqBD,KAAK,GAAGC,QAAQ,CAACC,QAAtC;AAAA,KAAf,EAA+D,CAA/D,CADmB;AAAA,GAArB;;AAGA,MAAMC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG,iBAAOC,GAAP,EAAYC,WAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACdlB,cAAAA,SAAS,CAACmB,KAAV,GADc,CAEd;;AAFc;AAAA,qBAIMD,WAAW,CAAC;AAC5BE,gBAAAA,SAAS,EAAE;AACPC,kBAAAA,KAAK,EAAEJ,GAAG,CAACK;AADJ;AADiB,eAAD,CAAX,UAIX,UAAAC,GAAG,EAAI;AACZC,gBAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACH,eANmB,CAJN;;AAAA;AAIRC,cAAAA,KAJQ;AAYd3B,cAAAA,MAAM,CAAC4B,IAAP,CAAY;AACVC,gBAAAA,QAAQ,EAAE,QADA;AAEVC,gBAAAA,KAAK,EAAE;AAACP,kBAAAA,EAAE,EAAEI,KAAK,CAACI,IAAN,CAAWZ,WAAX,CAAuBI;AAA5B;AAFG,eAAZ;;AAZc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAPN,OAAO;AAAA;AAAA;AAAA,KAAb;;AAkBA,SACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAA,QAAWN,EAAX,SAAGoB,IAAH,CAAWpB,EAAX;AAAA,WACC,MAAC,QAAD;AACI,MAAA,QAAQ,EAAEJ,qBADd;AAEI,MAAA,cAAc,EAAE,CAAC;AAACuB,QAAAA,KAAK,EAAExB;AAAR,OAAD,CAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIG,UAAAa,WAAW;AAAA,aACV,MAAC,cAAD;AACE,QAAA,MAAM,EAAEhB,cAAc,CAACQ,EAAE,CAACC,IAAJ,CADxB;AAEE,QAAA,IAAI,EAAC,WAFP;AAGE,QAAA,WAAW,0BAAmBF,UAAU,CAACC,EAAD,CAA7B,WAHb;AAIE,QAAA,SAAS,EAAC,4CAJZ;AAKE,QAAA,KAAK,EAAEA,EAAE,CAACC,IAAH,CAAQoB,MAAR,IAAkBrB,EAAE,CAACC,IAAH,CAAQ,CAAR,EAAWqB,IAA7B,IAAqCtB,EAAE,CAACC,IAAH,CAAQ,CAAR,EAAWqB,IAAX,CAAgBC,KAL9D;AAME,QAAA,QAAQ,EAAC,KANX;AAOE,QAAA,KAAK,EAAEvB,EAAE,CAACwB,KAPZ;AAQE,QAAA,KAAK,EAAE,eAAAjB,GAAG;AAAA,iBAAID,OAAO,CAACC,GAAD,EAAMC,WAAN,CAAX;AAAA,SARZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUGV,KAAK,CAAC2B,QAVT,CADU;AAAA,KAJd,CADD;AAAA,GADH,CADF;AAyBD,CA/CD;;AAiDA,eAAe5B,WAAf","sourcesContent":["import StripeCheckout from \"react-stripe-checkout\"\nimport { Mutation } from \"react-apollo\"\nimport Router from \"next/router\"\nimport NProgress from \"nprogress\"\nimport gql from \"graphql-tag\"\nimport calcTotalPrice from \"../lib/calcTotalPrice\"\nimport Error from \"./ErrorMessage\"\nimport User, { CURRENT_USER_QUERY } from \"./User\"\n\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`\n\nconst TakeMyMoney = props => {\n  const totalItems = me =>\n    me.cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0)\n\n  const onToken = async (res, createOrder) => {\n    NProgress.start()\n    // manually call the mutation once we have the stripe token\n\n    const order = await createOrder({\n        variables: {\n            token: res.id\n        }\n    }).catch(err => {\n        alert(err.message)\n    })\n\n    Router.push({\n      pathname: '/order',\n      query: {id: order.data.createOrder.id}\n    })\n  }\n\n  return (\n    <User>\n      {({ data: { me } }) => (\n        <Mutation\n            mutation={CREATE_ORDER_MUTATION}\n            refetchQueries={[{query: CURRENT_USER_QUERY}]}\n        >\n          {createOrder => (\n            <StripeCheckout\n              amount={calcTotalPrice(me.cart)}\n              name=\"Sick Fits\"\n              description={`Your order of ${totalItems(me)} items`}\n              stripeKey=\"pk_test_s5G4igMtK9KvmQtbRd0L18yR00ALa4imnQ\"\n              image={me.cart.length && me.cart[0].item && me.cart[0].item.image }\n              currency=\"USD\"\n              email={me.email}\n              token={res => onToken(res, createOrder)}\n            >\n              {props.children}\n            </StripeCheckout>\n          )}\n        </Mutation>\n      )}\n    </User>\n  )\n}\n\nexport default TakeMyMoney\n"]},"metadata":{},"sourceType":"module"}