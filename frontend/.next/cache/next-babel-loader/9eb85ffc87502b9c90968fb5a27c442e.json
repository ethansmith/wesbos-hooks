{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar _jsxFileName = \"/Users/ethan/Sites/wpx/wesbos-hooks-now/frontend/components/CreateItem.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\nimport ErrorMessage from './ErrorMessage';\nimport Form from './styles/Form';\n\nconst getColor = props => {\n  if (props.isDragAccept) {\n    return '#00e676';\n  }\n\n  if (props.isDragReject) {\n    return '#ff1744';\n  }\n\n  if (props.isDragActive) {\n    return '#2196f3';\n  }\n\n  return '#eeeeee';\n};\n\nconst thumbsContainer = {\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  marginTop: 16\n};\nconst thumb = {\n  display: 'inline-flex',\n  borderRadius: 2,\n  border: '1px solid #eaeaea',\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: 'border-box'\n};\nconst thumbInner = {\n  display: 'flex',\n  minWidth: 0,\n  overflow: 'hidden'\n};\nconst img = {\n  display: 'block',\n  width: 'auto',\n  height: '100%'\n};\nconst Dropzone = styled.div.withConfig({\n  displayName: \"CreateItem__Dropzone\",\n  componentId: \"cxl74w-0\"\n})([\"flex:1;display:flex;flex-direction:column;align-items:center;padding:20px;border-width:2px;border-radius:2px;border-color:\", \";border-style:dashed;background-color:#fafafa;color:#bdbdbd;outline:none;transition:border 0.24s ease-in-out;\"], props => getColor(props));\nconst CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n      id\n    }\n  }\n`;\n\nconst CreateItem = props => {\n  const {\n    0: files,\n    1: setFiles\n  } = useState([]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: 'image/*',\n    onDrop: acceptedFiles => {\n      setFiles(acceptedFiles.map(file => _Object$assign(file, {\n        preview: URL.createObjectURL(file)\n      })));\n      uploadFileToCloudinary(acceptedFiles);\n    }\n  });\n  const thumbs = files.map(file => __jsx(\"div\", {\n    style: thumb,\n    key: file.name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    style: thumbInner,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: file.preview,\n    style: img,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }))));\n  useEffect(() => () => {\n    // Make sure to revoke the data uris to avoid memory leaks\n    files.forEach(file => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  const {\n    0: theTitle,\n    1: setTheTitle\n  } = useState('');\n  const {\n    0: thePrice,\n    1: setThePrice\n  } = useState('');\n  const {\n    0: theDescription,\n    1: setTheDescription\n  } = useState('');\n  const {\n    0: theImage,\n    1: setTheImage\n  } = useState('');\n  const {\n    0: theLargeImage,\n    1: setTheLargeImage\n  } = useState('');\n  const {\n    0: uploading,\n    1: setUploading\n  } = useState(false); // const uploadFile = async e => {\n  //   const data = new FormData();\n  //   data.append('file', e.target.files[0]);\n  //   data.append('upload_preset', 'sickfits');\n  //   setUploading(true);\n  //   const res = await fetch(\n  //     'https://api.cloudinary.com/v1_1/dxegnq95q/image/upload',\n  //     {\n  //       method: 'POST',\n  //       body: data,\n  //     }\n  //   );\n  //   const theFile = await res.json();\n  //   console.log(theFile);\n  //   setUploading(false);\n  //   setTheImage(theFile.secure_url);\n  //   setTheLargeImage(theFile.eager[0].secure_url);\n  // };\n\n  const uploadFileToCloudinary = async files => {\n    const data = new FormData(); // TODO: accept multiple files\n\n    data.append('file', files[0]);\n    data.append('upload_preset', 'sickfits');\n    setUploading(true);\n    const res = await fetch('https://api.cloudinary.com/v1_1/dxegnq95q/image/upload', {\n      method: 'POST',\n      body: data\n    });\n    const theFile = await res.json();\n    console.log(theFile);\n    setUploading(false);\n    setTheImage(theFile.secure_url);\n    setTheLargeImage(theFile.eager[0].secure_url);\n  };\n\n  return __jsx(Mutation, {\n    mutation: CREATE_ITEM_MUTATION,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, (createItem, {\n    loading,\n    error\n  }) => __jsx(Form, {\n    onSubmit: async e => {\n      // Stop the form from submitting\n      e.preventDefault(); // call the mutation\n\n      const res = await createItem({\n        variables: {\n          title: theTitle,\n          price: _parseInt(thePrice),\n          description: theDescription,\n          image: theImage,\n          largeImage: theLargeImage\n        }\n      }); // change them to the single item page\n\n      Router.push({\n        pathname: '/item',\n        query: {\n          id: res.data.createItem.id\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, __jsx(ErrorMessage, {\n    error: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }), __jsx(\"fieldset\", {\n    disabled: loading,\n    \"aria-busy\": loading,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216\n    },\n    __self: this\n  }, __jsx(Dropzone, _extends({}, getRootProps({\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  }, {\n    className: 'dropzone'\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233\n    },\n    __self: this\n  }), __jsx(\"input\", _extends({}, getInputProps(), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  })), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240\n    },\n    __self: this\n  }, \"Drag 'n' drop some files here, or click to select files\")), __jsx(\"aside\", {\n    style: thumbsContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  }, thumbs, uploading && __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244\n    },\n    __self: this\n  }, \"Uploading...\")), __jsx(\"label\", {\n    htmlFor: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247\n    },\n    __self: this\n  }, \"Title\", __jsx(\"input\", {\n    type: \"text\",\n    id: \"title\",\n    name: \"title\",\n    placeholder: \"Title\",\n    autoComplete: \"off\",\n    required: true,\n    value: theTitle,\n    onChange: e => setTheTitle(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"Price\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261\n    },\n    __self: this\n  }, \"Price\", __jsx(\"input\", {\n    type: \"number\",\n    id: \"Price\",\n    name: \"Price\",\n    placeholder: \"Price\",\n    required: true,\n    value: thePrice,\n    onChange: e => setThePrice(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  })), __jsx(\"label\", {\n    htmlFor: \"Description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, \"Description\", __jsx(\"textarea\", {\n    id: \"Description\",\n    name: \"Description\",\n    placeholder: \"Enter a Description\",\n    required: true,\n    value: theDescription,\n    onChange: e => setTheDescription(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276\n    },\n    __self: this\n  })), __jsx(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, \"Submit!\"))));\n};\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };","map":{"version":3,"sources":["/Users/ethan/Sites/wpx/wesbos-hooks-now/frontend/components/CreateItem.js"],"names":["gql","Router","useEffect","useState","Mutation","useDropzone","styled","ErrorMessage","Form","getColor","props","isDragAccept","isDragReject","isDragActive","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","Dropzone","div","CREATE_ITEM_MUTATION","CreateItem","files","setFiles","getRootProps","getInputProps","accept","onDrop","acceptedFiles","map","file","preview","URL","createObjectURL","uploadFileToCloudinary","thumbs","name","forEach","revokeObjectURL","theTitle","setTheTitle","thePrice","setThePrice","theDescription","setTheDescription","theImage","setTheImage","theLargeImage","setTheLargeImage","uploading","setUploading","data","FormData","append","res","fetch","method","body","theFile","json","console","log","secure_url","eager","createItem","loading","error","e","preventDefault","variables","title","price","description","image","largeImage","push","pathname","query","id","className","target","value"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport Router from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\nimport ErrorMessage from './ErrorMessage';\nimport Form from './styles/Form';\n\nconst getColor = props => {\n  if (props.isDragAccept) {\n    return '#00e676';\n  }\n  if (props.isDragReject) {\n    return '#ff1744';\n  }\n  if (props.isDragActive) {\n    return '#2196f3';\n  }\n  return '#eeeeee';\n};\n\nconst thumbsContainer = {\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  marginTop: 16,\n};\n\nconst thumb = {\n  display: 'inline-flex',\n  borderRadius: 2,\n  border: '1px solid #eaeaea',\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: 'border-box',\n};\n\nconst thumbInner = {\n  display: 'flex',\n  minWidth: 0,\n  overflow: 'hidden',\n};\n\nconst img = {\n  display: 'block',\n  width: 'auto',\n  height: '100%',\n};\n\nconst Dropzone = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${props => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #bdbdbd;\n  outline: none;\n  transition: border 0.24s ease-in-out;\n`;\n\nconst CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n      id\n    }\n  }\n`;\n\nconst CreateItem = props => {\n  const [files, setFiles] = useState([]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    accept: 'image/*',\n    onDrop: acceptedFiles => {\n      setFiles(\n        acceptedFiles.map(file =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          })\n        )\n      );\n      uploadFileToCloudinary(acceptedFiles);\n    },\n  });\n\n  const thumbs = files.map(file => (\n    <div style={thumb} key={file.name}>\n      <div style={thumbInner}>\n        <img src={file.preview} style={img} />\n      </div>\n    </div>\n  ));\n\n  useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach(file => URL.revokeObjectURL(file.preview));\n    },\n    [files]\n  );\n\n  const [theTitle, setTheTitle] = useState('');\n  const [thePrice, setThePrice] = useState('');\n  const [theDescription, setTheDescription] = useState('');\n  const [theImage, setTheImage] = useState('');\n  const [theLargeImage, setTheLargeImage] = useState('');\n  const [uploading, setUploading] = useState(false);\n\n  // const uploadFile = async e => {\n  //   const data = new FormData();\n\n  //   data.append('file', e.target.files[0]);\n  //   data.append('upload_preset', 'sickfits');\n\n  //   setUploading(true);\n\n  //   const res = await fetch(\n  //     'https://api.cloudinary.com/v1_1/dxegnq95q/image/upload',\n  //     {\n  //       method: 'POST',\n  //       body: data,\n  //     }\n  //   );\n\n  //   const theFile = await res.json();\n\n  //   console.log(theFile);\n\n  //   setUploading(false);\n\n  //   setTheImage(theFile.secure_url);\n\n  //   setTheLargeImage(theFile.eager[0].secure_url);\n  // };\n\n  const uploadFileToCloudinary = async files => {\n    const data = new FormData();\n\n    // TODO: accept multiple files\n    data.append('file', files[0]);\n    data.append('upload_preset', 'sickfits');\n\n    setUploading(true);\n\n    const res = await fetch(\n      'https://api.cloudinary.com/v1_1/dxegnq95q/image/upload',\n      {\n        method: 'POST',\n        body: data,\n      }\n    );\n\n    const theFile = await res.json();\n\n    console.log(theFile);\n\n    setUploading(false);\n\n    setTheImage(theFile.secure_url);\n\n    setTheLargeImage(theFile.eager[0].secure_url);\n  };\n\n  return (\n    <Mutation mutation={CREATE_ITEM_MUTATION}>\n      {(createItem, { loading, error }) => (\n        <Form\n          onSubmit={async e => {\n            // Stop the form from submitting\n            e.preventDefault();\n            // call the mutation\n            const res = await createItem({\n              variables: {\n                title: theTitle,\n                price: parseInt(thePrice),\n                description: theDescription,\n                image: theImage,\n                largeImage: theLargeImage,\n              },\n            });\n            // change them to the single item page\n            Router.push({\n              pathname: '/item',\n              query: { id: res.data.createItem.id },\n            });\n          }}\n        >\n          <ErrorMessage error={error} />\n\n          <fieldset disabled={loading} aria-busy={loading}>\n            {/* <label htmlFor=\"file\">\n              Image\n              <input\n                type=\"file\"\n                id=\"file\"\n                name=\"file\"\n                placeholder=\"Upload an image\"\n                required\n                onChange={e => uploadFile(e)}\n              />\n              {uploading && <p>Uploading...</p>}\n              {theImage && (\n                <img width=\"200\" src={theImage} alt=\"Upload Preview\" />\n              )}\n            </label> */}\n\n            <Dropzone\n              {...getRootProps(\n                { isDragActive, isDragAccept, isDragReject },\n                { className: 'dropzone' }\n              )}\n            >\n              <input {...getInputProps()} />\n              <p>Drag 'n' drop some files here, or click to select files</p>\n            </Dropzone>\n            <aside style={thumbsContainer}>\n              {thumbs}\n              {uploading && <p>Uploading...</p>}\n            </aside>\n\n            <label htmlFor=\"title\">\n              Title\n              <input\n                type=\"text\"\n                id=\"title\"\n                name=\"title\"\n                placeholder=\"Title\"\n                autoComplete=\"off\"\n                required\n                value={theTitle}\n                onChange={e => setTheTitle(e.target.value)}\n              />\n            </label>\n\n            <label htmlFor=\"Price\">\n              Price\n              <input\n                type=\"number\"\n                id=\"Price\"\n                name=\"Price\"\n                placeholder=\"Price\"\n                required\n                value={thePrice}\n                onChange={e => setThePrice(e.target.value)}\n              />\n            </label>\n\n            <label htmlFor=\"Description\">\n              Description\n              <textarea\n                id=\"Description\"\n                name=\"Description\"\n                placeholder=\"Enter a Description\"\n                required\n                value={theDescription}\n                onChange={e => setTheDescription(e.target.value)}\n              />\n            </label>\n            <button type=\"submit\">Submit!</button>\n          </fieldset>\n        </Form>\n      )}\n    </Mutation>\n  );\n};\n\nexport default CreateItem;\n\nexport { CREATE_ITEM_MUTATION };\n"]},"metadata":{},"sourceType":"module"}