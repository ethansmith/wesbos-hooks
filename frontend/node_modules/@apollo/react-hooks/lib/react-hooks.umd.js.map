{"version":3,"sources":["../src/data/OperationData.ts","../src/data/QueryData.ts","../src/useQuery.ts","../src/data/MutationData.ts","../src/useMutation.ts","../src/data/SubscriptionData.ts","../src/useSubscription.ts","../src/useApolloClient.ts","../src/ssr/getDataFromTree.ts","../src/ssr/renderToStringWithData.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,MAAA,aAAA,GAAA,YAAA;AAUE,aAAA,aAAA,CAAY,OAAZ,EAA+C,OAA/C,EAA2E;AATpE,WAAA,SAAA,GAAqB,IAArB;AACA,WAAA,eAAA,GAA2C,EAA3C;AAGA,WAAA,OAAA,GAA8B,EAA9B;AAGC,WAAA,OAAA,GAAmC,EAAnC;AAGN,WAAK,OAAL,GAAe,OAAO,IAAK,EAA3B;AACA,WAAK,OAAL,GAAe,OAAO,IAAI,EAA1B;AACD;;AAEM,IAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACE,aAAO,KAAK,OAAZ;AACD,KAFM;;AAIA,IAAA,aAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,UAAlB,EAAqD;AACnD,UAAI,CAAC,8BAAQ,KAAK,OAAb,EAAsB,UAAtB,CAAL,EAAwC;AACtC,aAAK,eAAL,GAAuB,KAAK,OAA5B;AACD;;AACD,WAAK,OAAL,GAAe,UAAf;AACD,KALM;;AAYG,IAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAV,YAAA;AACE,WAAK,SAAL,GAAiB,KAAjB;AACD,KAFS;;AAIA,IAAA,aAAA,CAAA,SAAA,CAAA,aAAA,GAAV,YAAA;AACE,UAAM,MAAM,GACT,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,MAA9B,IACC,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,MAFhC;AAIA,MAAA,OAAA,CAAA,GAAA,CACI,QADJ,KAEE,YAFF,GAEE,4BAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAFF,GAEE,4BAAA,CAAA,CAAA,MAAA,EAAA,uEACE,6DADF,GAEE,uCAFF,CAFF;AAOA,UAAI,KAAK,GAAG,KAAZ;;AACA,UAAI,MAAM,KAAK,KAAK,MAApB,EAA4B;AAC1B,QAAA,KAAK,GAAG,IAAR;AACA,aAAK,MAAL,GAAc,MAAd;AACA,aAAK,OAAL;AACD;;AACD,aAAO;AACL,QAAA,MAAM,EAAE,KAAK,MADR;AAEL,QAAA,KAAK,EAAA;AAFA,OAAP;AAID,KAtBS;;AAwBA,IAAA,aAAA,CAAA,SAAA,CAAA,kBAAA,GAAV,UAA6B,QAA7B,EAAqD,IAArD,EAAuE;AACrE,UAAM,SAAS,GAAG,yBAAO,QAAP,CAAlB;AACA,UAAM,qBAAqB,GAAG,gCAAc,IAAd,CAA9B;AACA,UAAM,iBAAiB,GAAG,gCAAc,SAAS,CAAC,IAAxB,CAA1B;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KACY,YADZ,GACY,4BACG,SAAA,CAAA,IAAA,KAAA,IADH,EACG,CADH,CADZ,GAEe,4BAAA,SAAA,CAAA,IAAA,KAAA,IAAA,EAAA,eAAA,qBAAA,GAAA,sBAAA,IACR,qBAAqB,GAAA,UAArB,GAAgC,iBAAhC,GAAiD,oBADzC,CAAA,CAFf;AAKD,KATS;;AAUZ,WAAA,aAAA;AAAC,GArED,EAAA;;ACQA,MAAA,SAAA,GAAA,UAAA,MAAA,EAAA;AAAkD,0BAAA,SAAA,EAAA,MAAA;;AAKhD,aAAA,SAAA,CAAY,EAAZ,EAQC;UAPC,OAAA,GAAA,EAAA,CAAA,O;UACA,OAAA,GAAA,EAAA,CAAA,O;UACA,WAAA,GAAA,EAAA,CAAA,W;;AAHF,UAAA,KAAA,GASE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,EAAe,OAAf,KAAuB,IATzB;;AAJQ,MAAA,KAAA,CAAA,YAAA,GAAqD,EAArD;AACA,MAAA,KAAA,CAAA,iBAAA,GAA+D,EAA/D;AAaN,MAAA,KAAI,CAAC,WAAL,GAAmB,WAAnB;;AACD;;AAEM,IAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AACE,WAAK,aAAL;;AAEM,UAAA,EAAA,GAAA,KAAA,UAAA,EAAA;AAAA,UAAE,IAAA,GAAA,EAAA,CAAA,IAAF;AAAA,UAAQ,KAAA,GAAA,EAAA,CAAA,KAAR;;AACN,UAAI,IAAI,IAAI,KAAK,KAAK,KAAK,YAAL,CAAkB,KAAxC,EAA+C;AAC7C,aAAK,uBAAL;AACA,aAAK,YAAL,CAAkB,KAAlB,GAA0B,KAA1B;AACD;;AAED,WAAK,qBAAL;;AAEA,UAAI,CAAC,IAAL,EAAW;AACT,aAAK,sBAAL;AACD;;AAED,UAAM,MAAM,GAAG,YAAA;AAAM,eAAA,KAAI,CAAC,cAAL,EAAA;AAAqB,OAA1C;;AACA,UAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,cAAjC,EAAiD;AAC/C,YAAM,MAAM,GAAG,KAAK,OAAL,CAAa,cAAb,CAA4B,eAA5B,CAA4C,IAA5C,EAAkD,MAAlD,CAAf;AACA,eAAO,MAAM,IAAI;AAAE,UAAA,OAAO,EAAE,IAAX;AAAiB,UAAA,aAAa,EAAE,4BAAc;AAA9C,SAAjB;AACD;;AAED,aAAO,MAAM,EAAb;AACD,KAtBM;;AAyBA,IAAA,SAAA,CAAA,SAAA,CAAA,SAAA,GAAP,YAAA;AACE,UAAI,KAAK,UAAL,GAAkB,IAAtB,EAA4B,OAAO,KAAP;;AAG5B,UAAM,EAAA,GAAA,KAAA,UAAA,EAAN;AAAA,UACE,QAAA,GAAA,EAAA,CAAA,QADF;AAAA,UAEE,GAAA,GAAA,EAAA,CAAA,GAFF;AAAA,UAGE,WAAA,GAAA,EAAA,CAAA,WAHF;AAAA,UAIE,IAAA,GAAA,EAAA,CAAA,IAJF;AAAA,UAKE,WAAA,GAAA,EAAA,CAAA,WALF;AAAA,UAME,OAAA,GAAA,EAAA,CAAA,OANF;AAAA,UAOE,cAAA,GAAA,EAAA,CAAA,cAPF;AAAA,UAQE,IAAA,GAAA,mBAAA,EAAA,EAAA,CAAA,UAAA,EAAA,KAAA,EAAA,aAAA,EAAA,MAAA,EAAA,aAAA,EAAA,SAAA,EAAA,gBAAA,CAAA,CARF;;AAWM,UAAA,WAAA,GAAA,IAAA,CAAA,WAAA;AACN,UAAI,GAAG,KAAK,KAAZ,EAAmB,OAAO,KAAP;;AACnB,UAAI,WAAW,KAAK,cAAhB,IAAkC,WAAW,KAAK,mBAAtD,EAA2E;AACzE,QAAA,WAAW,GAAG,aAAd;AACD;;AAED,UAAM,GAAG,GAAG,KAAK,aAAL,GAAqB,MAArB,CAA4B,UAA5B,CAAsC,qBAAA,EAAA,EAC7C,IAD6C,EACzC;AACP,QAAA,WAAW,EAAA;AADJ,OADyC,CAAtC,CAAZ;;AAMA,UAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,cAAjC,EAAiD;AAC/C,aAAK,OAAL,CAAa,cAAb,CAA4B,qBAA5B,CAAkD,GAAlD,EAAuD,KAAK,UAAL,EAAvD;AACD;;AAED,UAAM,MAAM,GAAG,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,gBAA9B,EAAf;AACA,aAAO,MAAM,CAAC,OAAP,GAAiB,GAAG,CAAC,MAAJ,EAAjB,GAAgC,KAAvC;AACD,KAjCM;;AAmCA,IAAA,SAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACE,WAAK,SAAL,GAAiB,IAAjB;AACA,WAAK,sBAAL;AACA,aAAO,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAP;AACD,KAJM;;AAMG,IAAA,SAAA,CAAA,SAAA,CAAA,OAAA,GAAV,YAAA;AACE,WAAK,uBAAL;AACA,WAAK,iBAAL,CAAuB,KAAvB,GAA+B,IAA/B;AACA,WAAK,YAAL,CAAkB,MAAlB,GAA2B,IAA3B;AACD,KAJS;;AAMF,IAAA,SAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,YAAA;AACE,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,WAAL;AACD;AACF,KAJO;;AAMA,IAAA,SAAA,CAAA,SAAA,CAAA,6BAAA,GAAR,YAAA;AACE,WAAK,kBAAL,CAAwB,KAAK,UAAL,GAAkB,KAA1C,EAAiD,0BAAa,KAA9D;AACA,UAAM,WAAW,GAAG,KAAK,UAAL,GAAkB,WAAlB,IAAiC,OAArD;AAEA,aAAA,qBAAA,EAAA,EACK,KAAK,UAAL,EADL,EACsB;AACpB,QAAA,WAAW,EAAA,WADS;AAEpB,QAAA,OAAO,EAAE,KAAK,UAAL,GAAkB,OAAlB,IAA6B,EAFlB;AAGpB,QAAA,QAAQ,EAAE;AAAE,UAAA,cAAc,EAAE;AAAE,YAAA,WAAW,EAAA;AAAb;AAAlB;AAHU,OADtB,CAAA;AAMD,KAVO;;AAYA,IAAA,SAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,UACE,UADF,EACgD;AAE9C,aAAO;AACL,QAAA,SAAS,EAAE,UAAU,CAAC,SADjB;AAEL,QAAA,OAAO,EAAE,UAAU,CAAC,OAAX,CAAmB,IAAnB,CAAwB,UAAxB,CAFJ;AAGL,QAAA,SAAS,EAAE,UAAU,CAAC,SAAX,CAAqB,IAArB,CAA0B,UAA1B,CAHN;AAIL,QAAA,WAAW,EAAE,UAAU,CAAC,WAAX,CAAuB,IAAvB,CAA4B,UAA5B,CAJR;AAKL,QAAA,YAAY,EAAE,UAAU,CAAC,YAAX,CAAwB,IAAxB,CAA6B,UAA7B,CALT;AAML,QAAA,WAAW,EAAE,UAAU,CAAC,WAAX,CAAuB,IAAvB,CAA4B,UAA5B,CANR;AAOL,QAAA,eAAe,EAAE,UAAU,CAAC,eAAX,CAA2B,IAA3B,CAAgC,UAAhC;AAPZ,OAAP;AASD,KAZO;;AAcA,IAAA,SAAA,CAAA,SAAA,CAAA,yBAAA,GAAR,YAAA;AAIE,UAAI,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,cAAjC,EAAiD;AAC/C,aAAK,iBAAL,CAAuB,KAAvB,GAA+B,KAAK,OAAL,CAAa,cAAb,CAA4B,gBAA5B,CAC7B,KAAK,UAAL,EAD6B,CAA/B;AAGD;;AAED,UAAI,CAAC,KAAK,iBAAL,CAAuB,KAA5B,EAAmC;AACjC,YAAM,sBAAsB,GAAG,KAAK,6BAAL,EAA/B;AACA,aAAK,YAAL,CAAkB,sBAAlB,GAAwC,qBAAA,EAAA,EACnC,sBADmC,EACb;AACzB,UAAA,QAAQ,EAAE;AADe,SADa,CAAxC;AAIA,aAAK,iBAAL,CAAuB,KAAvB,GAA+B,KAAK,aAAL,GAAqB,MAArB,CAA4B,UAA5B,CAC7B,sBAD6B,CAA/B;AAGD;AACF,KApBO;;AAsBA,IAAA,SAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;AAEE,UAAI,CAAC,KAAK,iBAAL,CAAuB,KAA5B,EAAmC;AACjC,aAAK,yBAAL;AACD;;AAED,UAAM,yBAAyB,GAAA,qBAAA,EAAA,EAC1B,KAAK,6BAAL,EAD0B,EACU;AACvC,QAAA,QAAQ,EAAE;AAD6B,OADV,CAA/B;;AAKA,UACE,CAAC,8BACC,yBADD,EAEC,KAAK,YAAL,CAAkB,sBAFnB,CADH,EAKE;AACA,aAAK,YAAL,CAAkB,sBAAlB,GAA2C,yBAA3C;AACA,aAAK,iBAAL,CACG,KADH,CACU,UADV,CACqB,yBADrB,EAMG,KANH,CAMS,YAAA,CAAQ,CANjB;AAOD;AACF,KA1BO;;AA4BA,IAAA,SAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,YAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AACE,UAAI,KAAK,iBAAL,CAAuB,YAA3B,EAAyC;AAEzC,UAAM,QAAQ,GAAG,KAAK,iBAAL,CAAuB,KAAxC;AACA,WAAK,iBAAL,CAAuB,YAAvB,GAAsC,QAAQ,CAAC,SAAT,CAAmB;AACvD,QAAA,IAAI,EAAE,UAAC,EAAD,EAAiC;cAA9B,OAAA,GAAA,EAAA,CAAA,O;cAAS,aAAA,GAAA,EAAA,CAAA,a;cAAe,IAAA,GAAA,EAAA,CAAA,I;;AAC/B,cACE,KAAI,CAAC,YAAL,CAAkB,MAAlB,IACA,KAAI,CAAC,YAAL,CAAkB,MAAlB,CAAyB,OAAzB,KAAqC,OADrC,IAEA,KAAI,CAAC,YAAL,CAAkB,MAAlB,CAAyB,aAAzB,KAA2C,aAF3C,IAGA,8BAAQ,KAAI,CAAC,YAAL,CAAkB,MAAlB,CAAyB,IAAjC,EAAuC,IAAI,IAAI,EAA/C,CAJF,EAKE;AACA;AACD;;AAED,UAAA,KAAI,CAAC,iBAAL;AACD,SAZsD;AAavD,QAAA,KAAK,EAAE,UAAA,KAAA,EAAK;AACV,UAAA,KAAI,CAAC,kBAAL;;AACA,cAAI,CAAC,KAAK,CAAC,cAAN,CAAqB,eAArB,CAAL,EAA4C,MAAM,KAAN;;AAC5C,UAAA,KAAI,CAAC,iBAAL;AACD;AAjBsD,OAAnB,CAAtC;AAmBD,KAvBO;;AAyBA,IAAA,SAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,YAAA;AACE,WAAK,uBAAL;AASA,UAAM,SAAS,GAAG,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,YAA9B,EAAlB;AACA,UAAM,UAAU,GAAG,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,aAA9B,EAAnB;AACA,WAAK,iBAAL,CAAuB,KAAvB,CAA8B,gBAA9B;AACA,WAAK,sBAAL;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,KAAK,iBAAL,CAAuB,KAArC,EAA6C;AAC3C,QAAA,SAAS,EAAA,SADkC;AAE3C,QAAA,UAAU,EAAA;AAFiC,OAA7C;AAID,KAlBO;;AAoBA,IAAA,SAAA,CAAA,SAAA,CAAA,cAAA,GAAR,YAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AACE,UAAI,MAAM,GAAG;AACX,QAAA,IAAI,EAAE,MAAM,CAAC,MAAP,CAAc,IAAd;AADK,OAAb;AAKA,MAAA,MAAM,CAAC,MAAP,CACE,MADF,EAEE,KAAK,qBAAL,CAA2B,KAAK,iBAAL,CAAuB,KAAlD,CAFF;;AAQA,UAAI,KAAK,UAAL,GAAkB,IAAtB,EAA4B;AAC1B,QAAA,MAAM,GAAA,qBAAA,EAAA,EACD,MADC,EACK;AACT,UAAA,IAAI,EAAE,SADG;AAET,UAAA,KAAK,EAAE,SAFE;AAGT,UAAA,OAAO,EAAE;AAHA,SADL,CAAN;AAMD,OAPD,MAOO;AAEL,YAAM,aAAa,GAAG,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,gBAA9B,EAAtB;AACQ,YAAA,OAAA,GAAA,aAAA,CAAA,OAAA;AAAA,YAAS,OAAA,GAAA,aAAA,CAAA,OAAT;AAAA,YAAkB,aAAA,GAAA,aAAA,CAAA,aAAlB;AAAA,YAAiC,MAAA,GAAA,aAAA,CAAA,MAAjC;AACF,YAAA,KAAA,GAAA,aAAA,CAAA,KAAA;AAAA,YAAO,IAAA,GAAA,aAAA,CAAA,IAAP;AACN,QAAA,IAAI,GAAG,IAAI,IAAK,MAAM,CAAC,MAAP,CAAc,IAAd,CAAhB;;AAIA,YAAI,MAAM,IAAI,MAAM,CAAC,MAAP,GAAgB,CAA9B,EAAiC;AAC/B,UAAA,KAAK,GAAG,IAAI,yBAAJ,CAAgB;AAAE,YAAA,aAAa,EAAE;AAAjB,WAAhB,CAAR;AACD;;AAED,QAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB;AAAE,UAAA,OAAO,EAAA,OAAT;AAAW,UAAA,aAAa,EAAA,aAAxB;AAA0B,UAAA,KAAK,EAAA;AAA/B,SAAtB;;AAEA,YAAI,OAAJ,EAAa;AACX,cAAM,YAAY,GAAG,KAAK,YAAL,CAAkB,MAAlB,GACjB,KAAK,YAAL,CAAkB,MAAlB,CAAyB,IADR,GAEjB,EAFJ;AAGA,UAAA,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,IAArB,EAA2B,YAA3B,EAAyC,IAAzC;AACD,SALD,MAKO,IAAI,KAAJ,EAAW;AAChB,UAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB;AACpB,YAAA,IAAI,EAAE,CAAC,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,aAA9B,MAAkD,EAAnD,EACH;AAFiB,WAAtB;AAID,SALM,MAKA;AACG,cAAA,WAAA,GAAA,KAAA,iBAAA,CAAA,KAAA,CAAA,OAAA,CAAA,WAAA;AACA,cAAA,cAAA,GAAA,KAAA,UAAA,GAAA,cAAA;;AACR,cACE,cAAc,IACd,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,MAAlB,KAA6B,CAD7B,IAEA,OAFA,IAGA,WAAW,KAAK,YAJlB,EAKE;AASA,YAAA,MAAM,CAAC,MAAP,CAAc,MAAd,EAAsB;AACpB,cAAA,OAAO,EAAE,IADW;AAEpB,cAAA,aAAa,EAAE,4BAAc;AAFT,aAAtB;AAIA,YAAA,MAAM,CAAC,OAAP;AACA,mBAAO,MAAP;AACD;;AAED,UAAA,MAAM,CAAC,MAAP,CAAc,MAAM,CAAC,IAArB,EAA2B,IAA3B;AACD;AACF;;AAMD,MAAA,UAAU,CAAC,YAAA;AACT,QAAA,KAAI,CAAC,iBAAL,CAAuB,KAAvB,CAA8B,qBAA9B;AACD,OAFS,CAAV;AAIA,MAAA,MAAM,CAAC,MAAP,GAAgB,KAAK,MAArB;AACA,WAAK,YAAL,CAAkB,OAAlB,GACG,KAAK,YAAL,CAAkB,MAAlB,IAA4B,KAAK,YAAL,CAAkB,MAAlB,CAAyB,OAAtD,IAAkE,KADpE;AAEA,WAAK,YAAL,CAAkB,MAAlB,GAA2B,MAA3B;AACA,aAAO,MAAP;AACD,KAxFO;;AA0FA,IAAA,SAAA,CAAA,SAAA,CAAA,sBAAA,GAAR,YAAA;AACQ,UAAA,EAAA,GAAA,KAAA,iBAAA,CAAA,KAAA,CAAA,gBAAA,EAAA;AAAA,UACJ,IAAA,GAAA,EAAA,CAAA,IADI;AAAA,UAEJ,OAAA,GAAA,EAAA,CAAA,OAFI;AAAA,UAGJ,KAAA,GAAA,EAAA,CAAA,KAHI;;AAMN,UAAI,CAAC,OAAL,EAAc;AACN,YAAA,EAAA,GAAA,KAAA,UAAA,EAAA;AAAA,YAAE,KAAA,GAAA,EAAA,CAAA,KAAF;AAAA,YAAS,SAAA,GAAA,EAAA,CAAA,SAAT;AAAA,YAAoB,WAAA,GAAA,EAAA,CAAA,WAApB;AAAA,YAAiC,OAAA,GAAA,EAAA,CAAA,OAAjC;;AAGN,YACE,KAAK,eAAL,IACA,CAAC,KAAK,YAAL,CAAkB,OADnB,IAEA,8BAAQ,KAAK,eAAL,CAAqB,KAA7B,EAAoC,KAApC,CAFA,IAGA,8BAAQ,KAAK,eAAL,CAAqB,SAA7B,EAAwC,SAAxC,CAJF,EAKE;AACA;AACD;;AAED,YAAI,WAAW,IAAI,CAAC,KAApB,EAA2B;AACzB,UAAA,WAAW,CAAC,IAAD,CAAX;AACD,SAFD,MAEO,IAAI,OAAO,IAAI,KAAf,EAAsB;AAC3B,UAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF;AACF,KA1BO;;AA4BA,IAAA,SAAA,CAAA,SAAA,CAAA,uBAAA,GAAR,YAAA;AACE,UAAI,KAAK,iBAAL,CAAuB,YAA3B,EAAyC;AACvC,aAAK,iBAAL,CAAuB,YAAvB,CAAoC,WAApC;AACA,eAAO,KAAK,iBAAL,CAAuB,YAA9B;AACD;AACF,KALO;;AAMV,WAAA,SAAA;AArVA,GAAA,CAAkD,aAAlD,CAAA;;WCVgB,Q,CACd,K,EACA,O,EAA6C;AAE7C,QAAM,OAAO,GAAG,uBAAW,oCAAX,CAAhB;;AACM,QAAA,EAAA,GAAA,uBAAA,UAAA,CAAA,EAAA;AAAA,aAAA,CAAA,GAAA,CAAA;AAAA,KAAA,EAAA,CAAA,CAAA;AAAA,QAAC,QAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,QAAW,WAAA,GAAA,EAAA,CAAA,CAAA,CAAX;;AACN,QAAM,cAAc,GAAG,OAAO,GAAA,qBAAA,EAAA,EAAQ,OAAR,EAAe;AAAE,MAAA,KAAK,EAAA;AAAP,KAAf,CAAA,GAA2B;AAAE,MAAA,KAAK,EAAA;AAAP,KAAzD;AAEA,QAAM,YAAY,GAAG,oBAArB;;AACA,aAAS,eAAT,GAAwB;AACtB,UAAI,CAAC,YAAY,CAAC,OAAlB,EAA2B;AACzB,QAAA,YAAY,CAAC,OAAb,GAAuB,IAAI,SAAJ,CAAiC;AACtD,UAAA,OAAO,EAAE,cAD6C;AAEtD,UAAA,OAAO,EAAA,OAF+C;AAGtD,UAAA,WAAW,EAAA;AAH2C,SAAjC,CAAvB;AAKD;;AACD,aAAO,YAAY,CAAC,OAApB;AACD;;AAED,QAAM,SAAS,GAAG,eAAe,EAAjC;AACA,IAAA,SAAS,CAAC,UAAV,CAAqB,cAArB;AACA,IAAA,SAAS,CAAC,OAAV,GAAoB,OAApB;AAEA,0BAAU,YAAA;AAAM,aAAA,SAAS,CAAC,YAAV,EAAA;AAAwB,KAAxC;AAEA,WAAO,SAAS,CAAC,OAAV,EAAP;AACD;;ACxBD,MAAA,YAAA,GAAA,UAAA,MAAA,EAAA;AAGU,0BAAA,YAAA,EAAA,MAAA;;AAMR,aAAA,YAAA,CAAY,EAAZ,EAUC;UATC,OAAA,GAAA,EAAA,CAAA,O;UACA,OAAA,GAAA,EAAA,CAAA,O;UACA,MAAA,GAAA,EAAA,CAAA,M;UACA,SAAA,GAAA,EAAA,CAAA,S;;AAJF,UAAA,KAAA,GAWE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,EAAe,OAAf,KAAuB,IAXzB;;AAYE,MAAA,KAAI,CAAC,kBAAL,CAAwB,OAAO,CAAC,QAAhC,EAA0C,0BAAa,QAAvD;;AACA,MAAA,KAAI,CAAC,MAAL,GAAc,MAAd;AACA,MAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;AACA,MAAA,KAAI,CAAC,oBAAL,GAA4B,CAA5B;;AACD;;AAEM,IAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,MAAf,EAA4C;AAA5C,UAAA,KAAA,GAAA,IAAA;;AACE,WAAK,kBAAL,CAAwB,KAAK,UAAL,GAAkB,QAA1C,EAAoD,0BAAa,QAAjE;;AACA,UAAM,WAAW,GAAG,UAClB,OADkB,EACkC;AACjD,eAAA,KAAI,CAAC,WAAL,CAAiB,OAAjB,CAAA;AAAyB,OAF9B;;AAGA,aAAO,CAAC,WAAD,EAAc,MAAd,CAAP;AACD,KANM;;AAQA,IAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACE,WAAK,SAAL,GAAiB,IAAjB;AACA,aAAO,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAP;AACD,KAHM;;AAKG,IAAA,YAAA,CAAA,SAAA,CAAA,OAAA,GAAV,YAAA,CAEC,CAFS;;AAIF,IAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UACE,uBADF,EAIsD;AAJtD,UAAA,KAAA,GAAA,IAAA;;AACE,UAAA,uBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,QAAA,uBAAA,GAGI,EAHJ;AAGoD;;AAEpD,WAAK,eAAL;AACA,UAAM,UAAU,GAAG,KAAK,qBAAL,EAAnB;AAEA,aAAO,KAAK,MAAL,CAAY,uBAAZ,EACJ,IADI,CACC,UAAC,QAAD,EAAiC;AACrC,QAAA,KAAI,CAAC,mBAAL,CAAyB,QAAzB,EAAmC,UAAnC;;AACA,eAAO,QAAP;AACD,OAJI,EAKJ,KALI,CAKE,UAAC,KAAD,EAAmB;AACxB,QAAA,KAAI,CAAC,eAAL,CAAqB,KAArB,EAA4B,UAA5B;;AACA,YAAI,CAAC,KAAI,CAAC,UAAL,GAAkB,OAAvB,EAAgC,MAAM,KAAN;AACjC,OARI,CAAP;AASD,KAlBO;;AAoBA,IAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAR,UACE,uBADF,EACqE;AAE7D,UAAA,EAAA,GAAA,KAAA,UAAA,EAAA;AAAA,UACJ,QAAA,GAAA,EAAA,CAAA,QADI;AAAA,UAEJ,SAAA,GAAA,EAAA,CAAA,SAFI;AAAA,UAGJ,kBAAA,GAAA,EAAA,CAAA,kBAHI;AAAA,UAIJ,MAAA,GAAA,EAAA,CAAA,MAJI;AAAA,UAKJ,EAAA,GAAA,EAAA,CAAA,OALI;AAAA,UAKJ,eAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,EALI;AAAA,UAMJ,EAAA,GAAA,EAAA,CAAA,mBANI;AAAA,UAMJ,mBAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,GAAA,EANI;AAAA,UAOJ,WAAA,GAAA,EAAA,CAAA,WAPI;;AASN,UAAM,aAAa,GAAA,qBAAA,EAAA,EAAQ,uBAAR,CAAnB;AAEA,UAAM,eAAe,GAAG,MAAM,CAAC,MAAP,CACtB,EADsB,EAEtB,SAFsB,EAGtB,aAAa,CAAC,SAHQ,CAAxB;AAKA,aAAO,aAAa,CAAC,SAArB;AAEA,aAAO,KAAK,aAAL,GAAqB,MAArB,CAA4B,MAA5B,CAAkC,qBAAA;AACvC,QAAA,QAAQ,EAAA,QAD+B;AAEvC,QAAA,kBAAkB,EAAA,kBAFqB;AAGvC,QAAA,cAAc,EACZ,aAAa,CAAC,cAAd,IAAgC,KAAK,UAAL,GAAkB,cAJb;AAKvC,QAAA,mBAAmB,EAAA,mBALoB;AAMvC,QAAA,MAAM,EAAA,MANiC;AAOvC,QAAA,OAAO,EAAE,eAP8B;AAQvC,QAAA,WAAW,EAAA,WAR4B;AASvC,QAAA,SAAS,EAAE;AAT4B,OAAA,EAUpC,aAVoC,CAAlC,CAAP;AAYD,KAjCO;;AAmCA,IAAA,YAAA,CAAA,SAAA,CAAA,eAAA,GAAR,YAAA;AACE,UAAI,CAAC,KAAK,MAAL,CAAY,OAAb,IAAwB,CAAC,KAAK,UAAL,GAAkB,aAA/C,EAA8D;AAC5D,aAAK,YAAL,CAAkB;AAChB,UAAA,OAAO,EAAE,IADO;AAEhB,UAAA,KAAK,EAAE,SAFS;AAGhB,UAAA,IAAI,EAAE,SAHU;AAIhB,UAAA,MAAM,EAAE;AAJQ,SAAlB;AAMD;AACF,KATO;;AAWA,IAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAR,UACE,QADF,EAEE,UAFF,EAEoB;AAEZ,UAAA,EAAA,GAAA,KAAA,UAAA,EAAA;AAAA,UAAE,WAAA,GAAA,EAAA,CAAA,WAAF;AAAA,UAAe,aAAA,GAAA,EAAA,CAAA,aAAf;;AAEE,UAAA,IAAA,GAAA,QAAA,CAAA,IAAA;AAAA,UAAM,MAAA,GAAA,QAAA,CAAA,MAAN;AACR,UAAM,KAAK,GACT,MAAM,IAAI,MAAM,CAAC,MAAP,GAAgB,CAA1B,GACI,IAAI,yBAAJ,CAAgB;AAAE,QAAA,aAAa,EAAE;AAAjB,OAAhB,CADJ,GAEI,SAHN;;AAKA,UAAM,cAAc,GAAG,YAAA;AACrB,eAAA,WAAW,GAAG,WAAW,CAAC,IAAD,CAAd,GAAgC,IAA3C;AAA+C,OADjD;;AAGA,UAAI,KAAK,oBAAL,CAA0B,UAA1B,KAAyC,CAAC,aAA9C,EAA6D;AAC3D,aAAK,YAAL,CAAkB;AAChB,UAAA,MAAM,EAAE,IADQ;AAEhB,UAAA,OAAO,EAAE,KAFO;AAGhB,UAAA,IAAI,EAAA,IAHY;AAIhB,UAAA,KAAK,EAAA;AAJW,SAAlB;AAMD;;AACD,MAAA,cAAc;AACf,KAxBO;;AA0BA,IAAA,YAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,KAAxB,EAA4C,UAA5C,EAA8D;AACpD,UAAA,OAAA,GAAA,KAAA,UAAA,GAAA,OAAA;;AAER,UAAI,KAAK,oBAAL,CAA0B,UAA1B,CAAJ,EAA2C;AACzC,aAAK,YAAL,CAAkB;AAChB,UAAA,OAAO,EAAE,KADO;AAEhB,UAAA,KAAK,EAAA,KAFW;AAGhB,UAAA,IAAI,EAAE,SAHU;AAIhB,UAAA,MAAM,EAAE;AAJQ,SAAlB;AAMD;;AAED,UAAI,OAAJ,EAAa;AACX,QAAA,OAAO,CAAC,KAAD,CAAP;AACD;AACF,KAfO;;AAiBA,IAAA,YAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;AACE,aAAO,EAAE,KAAK,oBAAd;AACD,KAFO;;AAIA,IAAA,YAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,UAA6B,UAA7B,EAA+C;AAC7C,aAAO,KAAK,oBAAL,KAA8B,UAArC;AACD,KAFO;;AAIA,IAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,MAArB,EAAkD;AAChD,UACE,KAAK,SAAL,KACC,CAAC,KAAK,cAAN,IAAwB,CAAC,8BAAQ,KAAK,cAAb,EAA6B,MAA7B,CAD1B,CADF,EAGE;AACA,aAAK,SAAL,CAAe,MAAf;AACA,aAAK,cAAL,GAAsB,MAAtB;AACD;AACF,KARO;;AASV,WAAA,YAAA;AA1KA,GAAA,CAGU,aAHV,CAAA;;WCPgB,W,CACd,Q,EACA,O,EAAgD;AAEhD,QAAM,OAAO,GAAG,uBAAW,oCAAX,CAAhB;;AACM,QAAA,EAAA,GAAA,qBAAA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,OAAA,EAAA;AAAA,KAAA,CAAA;AAAA,QAAC,MAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,QAAS,SAAA,GAAA,EAAA,CAAA,CAAA,CAAT;;AACN,QAAM,cAAc,GAAG,OAAO,GAAA,qBAAA,EAAA,EAAQ,OAAR,EAAe;AAAE,MAAA,QAAQ,EAAA;AAAV,KAAf,CAAA,GAA8B;AAAE,MAAA,QAAQ,EAAA;AAAV,KAA5D;AAEA,QAAM,eAAe,GAAG,oBAAxB;;AACA,aAAS,kBAAT,GAA2B;AACzB,UAAI,CAAC,eAAe,CAAC,OAArB,EAA8B;AAC5B,QAAA,eAAe,CAAC,OAAhB,GAA0B,IAAI,YAAJ,CAAoC;AAC5D,UAAA,OAAO,EAAE,cADmD;AAE5D,UAAA,OAAO,EAAA,OAFqD;AAG5D,UAAA,MAAM,EAAA,MAHsD;AAI5D,UAAA,SAAS,EAAA;AAJmD,SAApC,CAA1B;AAMD;;AACD,aAAO,eAAe,CAAC,OAAvB;AACD;;AAED,QAAM,YAAY,GAAG,kBAAkB,EAAvC;AACA,IAAA,YAAY,CAAC,UAAb,CAAwB,cAAxB;AACA,IAAA,YAAY,CAAC,OAAb,GAAuB,OAAvB;AAEA,0BAAU,YAAA;AAAM,aAAA,YAAY,CAAC,YAAb,EAAA;AAA2B,KAA3C;AAEA,WAAO,YAAY,CAAC,OAAb,CAAqB,MAArB,CAAP;AACD;;AC7BD,MAAA,gBAAA,GAAA,UAAA,MAAA,EAAA;AAGU,0BAAA,gBAAA,EAAA,MAAA;;AAIR,aAAA,gBAAA,CAAY,EAAZ,EAQC;UAPC,OAAA,GAAA,EAAA,CAAA,O;UACA,OAAA,GAAA,EAAA,CAAA,O;UACA,SAAA,GAAA,EAAA,CAAA,S;;AAHF,UAAA,KAAA,GASE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,OAAN,EAAe,OAAf,KAAuB,IATzB;;AAFQ,MAAA,KAAA,CAAA,iBAAA,GAAmD,EAAnD;AAYN,MAAA,KAAI,CAAC,SAAL,GAAiB,SAAjB;;AACA,MAAA,KAAI,CAAC,UAAL,CAAgB,OAAhB;;;AACD;;AAEM,IAAA,gBAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,MAAf,EAAgD;AAC9C,UAAI,aAAa,GAAG,MAApB;;AAEA,UAAI,KAAK,aAAL,GAAqB,KAAzB,EAAgC;AAC9B,QAAA,aAAa,GAAG,KAAK,gBAAL,EAAhB;AACD;;AAEK,UAAA,iBAAA,GAAA,KAAA,UAAA,GAAA,iBAAA;;AACN,UAAI,OAAO,iBAAP,KAA6B,UAAjC,EAA6C;AAC3C,QAAA,iBAAiB,GAAG,CAAC,CAAC,iBAAiB,CAAC,KAAK,UAAL,EAAD,CAAvC;AACD;;AAED,UACE,iBAAiB,KAAK,KAAtB,IACA,KAAK,eADL,IAEA,MAAM,CAAC,IAAP,CAAY,KAAK,eAAjB,EAAkC,MAAlC,GAA2C,CAF3C,KAGC,KAAK,eAAL,CAAqB,YAArB,KAAsC,KAAK,UAAL,GAAkB,YAAxD,IACC,CAAC,8BAAQ,KAAK,eAAL,CAAqB,SAA7B,EAAwC,KAAK,UAAL,GAAkB,SAA1D,CAJH,CADF,EAME;AACA,aAAK,eAAL;AACA,eAAO,KAAK,iBAAL,CAAuB,KAA9B;AACA,QAAA,aAAa,GAAG,KAAK,gBAAL,EAAhB;AACD;;AAED,WAAK,UAAL,CAAgB,KAAK,UAAL,EAAhB;AACA,WAAK,iBAAL;AAEA,WAAK,eAAL,GAAuB,KAAK,UAAL,EAAvB;AACA,aAAA,qBAAA,EAAA,EAAY,aAAZ,EAAyB;AAAE,QAAA,SAAS,EAAE,KAAK,UAAL,GAAkB;AAA/B,OAAzB,CAAA;AACD,KA7BM;;AA+BA,IAAA,gBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACE,WAAK,SAAL,GAAiB,IAAjB;AACA,aAAO,KAAK,OAAL,CAAa,IAAb,CAAkB,IAAlB,CAAP;AACD,KAHM;;AAKG,IAAA,gBAAA,CAAA,SAAA,CAAA,OAAA,GAAV,YAAA;AACE,WAAK,eAAL;AACA,aAAO,KAAK,iBAAL,CAAuB,KAA9B;AACD,KAHS;;AAKF,IAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAR,UAAmB,OAAnB,EAAkE;AAChE,UAAI,KAAK,iBAAL,CAAuB,KAA3B,EAAkC;AAClC,WAAK,iBAAL,CAAuB,KAAvB,GAA+B,KAAK,aAAL,GAAqB,MAArB,CAA4B,SAA5B,CAAsC;AACnE,QAAA,KAAK,EAAE,OAAO,CAAC,YADoD;AAEnE,QAAA,SAAS,EAAE,OAAO,CAAC,SAFgD;AAGnE,QAAA,WAAW,EAAE,OAAO,CAAC;AAH8C,OAAtC,CAA/B;AAKD,KAPO;;AASA,IAAA,gBAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,YAAA;AACE,UAAI,KAAK,iBAAL,CAAuB,YAA3B,EAAyC;AACzC,WAAK,iBAAL,CAAuB,YAAvB,GAAsC,KAAK,iBAAL,CAAuB,KAAvB,CAA8B,SAA9B,CACpC;AACE,QAAA,IAAI,EAAE,KAAK,iBAAL,CAAuB,IAAvB,CAA4B,IAA5B,CADR;AAEE,QAAA,KAAK,EAAE,KAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB,CAFT;AAGE,QAAA,QAAQ,EAAE,KAAK,oBAAL,CAA0B,IAA1B,CAA+B,IAA/B;AAHZ,OADoC,CAAtC;AAOD,KATO;;AAWA,IAAA,gBAAA,CAAA,SAAA,CAAA,gBAAA,GAAR,YAAA;AACE,aAAO;AACL,QAAA,OAAO,EAAE,IADJ;AAEL,QAAA,KAAK,EAAE,SAFF;AAGL,QAAA,IAAI,EAAE;AAHD,OAAP;AAKD,KANO;;AAQA,IAAA,gBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,MAArB,EAA+C;AAC7C,UAAI,KAAK,SAAT,EAAoB;AAClB,aAAK,SAAL,CAAe,MAAf;AACD;AACF,KAJO;;AAMA,IAAA,gBAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,MAA1B,EAA2D;AACjD,UAAA,kBAAA,GAAA,KAAA,UAAA,GAAA,kBAAA;AAER,WAAK,YAAL,CAAkB;AAChB,QAAA,IAAI,EAAE,MAAM,CAAC,IADG;AAEhB,QAAA,OAAO,EAAE,KAFO;AAGhB,QAAA,KAAK,EAAE;AAHS,OAAlB;;AAMA,UAAI,kBAAJ,EAAwB;AACtB,QAAA,kBAAkB,CAAC;AACjB,UAAA,MAAM,EAAE,KAAK,aAAL,GAAqB,MADZ;AAEjB,UAAA,gBAAgB,EAAE;AAFD,SAAD,CAAlB;AAID;AACF,KAfO;;AAiBA,IAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,KAApB,EAA8B;AAC5B,WAAK,YAAL,CAAkB;AAChB,QAAA,KAAK,EAAA,KADW;AAEhB,QAAA,OAAO,EAAE;AAFO,OAAlB;AAID,KALO;;AAOA,IAAA,gBAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,YAAA;AACU,UAAA,sBAAA,GAAA,KAAA,UAAA,GAAA,sBAAA;AACR,UAAI,sBAAJ,EAA4B,sBAAsB;AAClD,WAAK,eAAL;AACD,KAJO;;AAMA,IAAA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAR,YAAA;AACE,UAAI,KAAK,iBAAL,CAAuB,YAA3B,EAAyC;AACvC,aAAK,iBAAL,CAAuB,YAAvB,CAAoC,WAApC;AACA,eAAO,KAAK,iBAAL,CAAuB,YAA9B;AACD;AACF,KALO;;AAMV,WAAA,gBAAA;AApIA,GAAA,CAGU,aAHV,CAAA;;WCCgB,e,CACd,Y,EACA,O,EAAoD;AAEpD,QAAM,OAAO,GAAG,uBAAW,oCAAX,CAAhB;;AACM,QAAA,EAAA,GAAA,qBAAA;mBAAA;sBAAA;;AAAA,KAAA,CAAA;AAAA,QAAC,MAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,QAAS,SAAA,GAAA,EAAA,CAAA,CAAA,CAAT;;AAKN,QAAM,cAAc,GAAG,OAAO,G,yBACrB,O,EAAO;AAAE,MAAA,YAAY,EAAA;AAAd,K,CADc,GAE1B;AAAE,MAAA,YAAY,EAAA;AAAd,KAFJ;AAIA,QAAM,mBAAmB,GAAG,oBAA5B;;AACA,aAAS,sBAAT,GAA+B;AAC7B,UAAI,CAAC,mBAAmB,CAAC,OAAzB,EAAkC;AAChC,QAAA,mBAAmB,CAAC,OAApB,GAA8B,IAAI,gBAAJ,CAAwC;AACpE,UAAA,OAAO,EAAE,cAD2D;AAEpE,UAAA,OAAO,EAAA,OAF6D;AAGpE,UAAA,SAAS,EAAA;AAH2D,SAAxC,CAA9B;AAKD;;AACD,aAAO,mBAAmB,CAAC,OAA3B;AACD;;AAED,QAAM,gBAAgB,GAAG,sBAAsB,EAA/C;AACA,IAAA,gBAAgB,CAAC,UAAjB,CAA4B,cAA5B;AACA,IAAA,gBAAgB,CAAC,OAAjB,GAA2B,OAA3B;AAEA,0BAAU,YAAA;AAAM,aAAA,gBAAgB,CAAC,YAAjB,EAAA;AAA+B,KAA/C;AAEA,WAAO,gBAAgB,CAAC,OAAjB,CAAyB,MAAzB,CAAP;AACD;;WCnCe,e,GAAe;AACrB,QAAA,MAAA,GAAA,eAAA,UAAA,CAAA,oCAAA,EAAA,MAAA;;AACR,IAAA,OAAA,CAAA,GAAA,CAAA,QAAA,KAAA,YAAA,GAAA,4BAAA,MAAA,EAAA,CAAA,CAAA,GAAA,4BAAA,MAAA,EAAA,oEAGI,sDAHJ,CAAA;AAKA,WAAO,MAAP;AACD;;ACAD,WAAS,oBAAT,GAA6B;AAC3B,WAAO;AACL,MAAA,IAAI,EAAE,KADD;AAEL,MAAA,UAAU,EAAE;AAFP,KAAP;AAID;;AAED,MAAA,cAAA,GAAA,YAAA;AAAA,aAAA,cAAA,GAAA;AAEU,WAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AAMA,WAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AAuET;;AApEQ,IAAA,cAAA,CAAA,SAAA,CAAA,qBAAA,GAAP,UACE,UADF,EAEE,KAFF,EAEwC;AAEtC,WAAK,eAAL,CAAqB,KAArB,EAA4B,UAA5B,GAAyC,UAAzC;AACD,KALM;;AAQA,IAAA,cAAA,CAAA,SAAA,CAAA,gBAAA,GAAP,UACE,KADF,EACwC;AAEtC,aAAO,KAAK,eAAL,CAAqB,KAArB,EAA4B,UAAnC;AACD,KAJM;;AAMA,IAAA,cAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UACE,aADF,EAEE,MAFF,EAE+B;AAE7B,UAAM,IAAI,GAAG,KAAK,eAAL,CAAqB,aAAa,CAAC,UAAd,EAArB,CAAb;;AACA,UAAI,CAAC,IAAI,CAAC,IAAV,EAAgB;AACd,aAAK,aAAL,CAAmB,GAAnB,CACE,aAAa,CAAC,UAAd,EADF,EAEE,IAAI,OAAJ,CAAY,UAAA,OAAA,EAAO;AACjB,UAAA,OAAO,CAAC,aAAa,CAAC,SAAd,EAAD,CAAP;AACD,SAFD,CAFF;AAQA,eAAO,IAAP;AACD;;AACD,aAAO,MAAM,EAAb;AACD,KAjBM;;AAmBA,IAAA,cAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACE,aAAO,KAAK,aAAL,CAAmB,IAAnB,GAA0B,CAAjC;AACD,KAFM;;AAIA,IAAA,cAAA,CAAA,SAAA,CAAA,uBAAA,GAAP,YAAA;AAAA,UAAA,KAAA,GAAA,IAAA;;AACE,UAAM,QAAQ,GAAmB,EAAjC;AACA,WAAK,aAAL,CAAmB,OAAnB,CAA2B,UAAC,OAAD,EAAU,aAAV,EAAuB;AAUhD,QAAA,KAAI,CAAC,eAAL,CAAqB,aAArB,EAAoC,IAApC,GAA2C,IAA3C;AACA,QAAA,QAAQ,CAAC,IAAT,CAAc,OAAd;AACD,OAZD;AAaA,WAAK,aAAL,CAAmB,KAAnB;AACA,aAAO,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAP;AACD,KAjBM;;AAmBC,IAAA,cAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UACE,KADF,EACwC;AAE9B,UAAA,aAAA,GAAA,KAAA,aAAA;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,KAAA;AAAA,UAAO,SAAA,GAAA,KAAA,CAAA,SAAP;AACR,UAAM,MAAM,GAAG,aAAa,CAAC,GAAd,CAAkB,KAAlB,KAA4B,IAAI,GAAJ,EAA3C;AACA,UAAI,CAAC,aAAa,CAAC,GAAd,CAAkB,KAAlB,CAAL,EAA+B,aAAa,CAAC,GAAd,CAAkB,KAAlB,EAAyB,MAAzB;AAC/B,UAAM,eAAe,GAAG,IAAI,CAAC,SAAL,CAAe,SAAf,CAAxB;AACA,UAAM,IAAI,GAAG,MAAM,CAAC,GAAP,CAAW,eAAX,KAA+B,oBAAoB,EAAhE;AACA,UAAI,CAAC,MAAM,CAAC,GAAP,CAAW,eAAX,CAAL,EAAkC,MAAM,CAAC,GAAP,CAAW,eAAX,EAA4B,IAA5B;AAClC,aAAO,IAAP;AACD,KAXO;;AAYV,WAAA,cAAA;AAAC,GA/ED,EAAA;;WAiFgB,e,CACd,I,EACA,O,EAAoC;AAApC,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAAoC;;AAEpC,WAAO,iBAAiB,CAAC;AACvB,MAAA,IAAI,EAAA,IADmB;AAEvB,MAAA,OAAO,EAAA,OAFgB;AAKvB,MAAA,cAAc,EAAE,OAAO,CAAC,kBAAD,CAAP,CAA4B;AALrB,KAAD,CAAxB;AAOD;;AAQD,WAAgB,iBAAhB,CAAkC,EAAlC,EAO2B;QANzB,IAAA,GAAA,EAAA,CAAA,I;QACA,EAAA,GAAA,EAAA,CAAA,O;QAAA,OAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,EAAA,GAAA,E;QAIA,EAAA,GAAA,EAAA,CAAA,c;QAAA,cAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,OAAA,CAAA,kBAAA,CAAA,CAAA,oBAAA,GAAA,E;AAEA,QAAM,cAAc,GAAG,IAAI,cAAJ,EAAvB;;AAEA,aAAS,OAAT,GAAgB;AAMd,UAAM,aAAa,GAAG,oCAAtB;AACA,UAAM,IAAI,GAAG,cAAc,CACzB,eAAM,aAAN,CACE,aAAa,CAAC,QADhB,EAEE;AAAE,QAAA,KAAK,EAAA,qBAAA,EAAA,EAAO,OAAP,EAAc;AAAE,UAAA,cAAc,EAAA;AAAhB,SAAd;AAAP,OAFF,EAGE,IAHF,CADyB,CAA3B;AAQA,aAAO,cAAc,CAAC,WAAf,KACH,cAAc,CAAC,uBAAf,GAAyC,IAAzC,CAA8C,OAA9C,CADG,GAEH,IAFJ;AAGD;;AAED,WAAO,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,OAAvB,CAAP;AACD;;WCpJe,sB,CACd,S,EAA4B;AAE5B,WAAO,iBAAiB,CAAC;AACvB,MAAA,IAAI,EAAE,SADiB;AAEvB,MAAA,cAAc,EAAE,OAAO,CAAC,kBAAD,CAAP,CAA4B;AAFrB,KAAD,CAAxB;AAID,G","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { isEqual } from 'apollo-utilities';\nimport { invariant } from 'ts-invariant';\nimport {\n  ApolloContextValue,\n  parser,\n  DocumentType,\n  operationName\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { CommonOptions } from '../types';\n\nexport abstract class OperationData<TOptions = any> {\n  public isMounted: boolean = true;\n  public previousOptions: CommonOptions<TOptions> = {} as CommonOptions<\n    TOptions\n  >;\n  public context: ApolloContextValue = {};\n  public client: ApolloClient<object> | undefined;\n\n  private options: CommonOptions<TOptions> = {} as CommonOptions<TOptions>;\n\n  constructor(options?: CommonOptions<TOptions>, context?: ApolloContextValue) {\n    this.options = options || ({} as CommonOptions<TOptions>);\n    this.context = context || {};\n  }\n\n  public getOptions(): CommonOptions<TOptions> {\n    return this.options;\n  }\n\n  public setOptions(newOptions: CommonOptions<TOptions>) {\n    if (!isEqual(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  }\n\n  public abstract execute(...args: any): any;\n  public abstract afterExecute(...args: any): () => void;\n\n  protected abstract cleanup(): void;\n\n  protected unmount() {\n    this.isMounted = false;\n  }\n\n  protected refreshClient() {\n    const client =\n      (this.options && this.options.client) ||\n      (this.context && this.context.client);\n\n    invariant(\n      !!client,\n      'Could not find \"client\" in the context or passed in as an option. ' +\n        'Wrap the root component in an <ApolloProvider>, or pass an ' +\n        'ApolloClient instance in via options.'\n    );\n\n    let isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client as ApolloClient<object>,\n      isNew\n    };\n  }\n\n  protected verifyDocumentType(document: DocumentNode, type: DocumentType) {\n    const operation = parser(document);\n    const requiredOperationName = operationName(type);\n    const usedOperationName = operationName(operation.type);\n    invariant(\n      operation.type === type,\n      `Running a ${requiredOperationName} requires a graphql ` +\n        `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n    );\n  }\n}\n","import {\n  ApolloQueryResult,\n  ObservableQuery,\n  ApolloError,\n  NetworkStatus\n} from 'apollo-client';\nimport { isEqual } from 'apollo-utilities';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  QueryResult,\n  ObservableQueryFields\n} from '@apollo/react-common';\n\nimport {\n  QueryPreviousData,\n  QueryOptions,\n  QueryCurrentObservable\n} from '../types';\nimport { OperationData } from './OperationData';\n\nexport class QueryData<TData, TVariables> extends OperationData {\n  private previousData: QueryPreviousData<TData, TVariables> = {};\n  private currentObservable: QueryCurrentObservable<TData, TVariables> = {};\n  private forceUpdate: any;\n\n  constructor({\n    options,\n    context,\n    forceUpdate\n  }: {\n    options: QueryOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    forceUpdate: any;\n  }) {\n    super(options, context);\n    this.forceUpdate = forceUpdate;\n  }\n\n  public execute(): QueryResult<TData, TVariables> {\n    this.refreshClient();\n\n    const { skip, query } = this.getOptions();\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n\n    if (!skip) {\n      this.startQuerySubscription();\n    }\n\n    const finish = () => this.getQueryResult();\n    if (this.context && this.context.renderPromises) {\n      const result = this.context.renderPromises.addQueryPromise(this, finish);\n      return result || { loading: true, networkStatus: NetworkStatus.loading };\n    }\n\n    return finish();\n  }\n\n  // For server-side rendering (see getDataFromTree.ts)\n  public fetchData(): Promise<ApolloQueryResult<any>> | boolean {\n    if (this.getOptions().skip) return false;\n\n    // pull off react options\n    const {\n      children,\n      ssr,\n      displayName,\n      skip,\n      onCompleted,\n      onError,\n      partialRefetch,\n      ...opts\n    } = this.getOptions();\n\n    let { fetchPolicy } = opts;\n    if (ssr === false) return false;\n    if (fetchPolicy === 'network-only' || fetchPolicy === 'cache-and-network') {\n      fetchPolicy = 'cache-first'; // ignore force fetch in SSR;\n    }\n\n    const obs = this.refreshClient().client.watchQuery({\n      ...opts,\n      fetchPolicy\n    });\n\n    // Register the SSR observable, so it can be re-used once the value comes back.\n    if (this.context && this.context.renderPromises) {\n      this.context.renderPromises.registerSSRObservable(obs, this.getOptions());\n    }\n\n    const result = this.currentObservable.query!.getCurrentResult();\n    return result.loading ? obs.result() : false;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    this.handleErrorOrCompleted();\n    return this.unmount.bind(this);\n  }\n\n  protected cleanup() {\n    this.removeQuerySubscription();\n    this.currentObservable.query = null;\n    this.previousData.result = null;\n  }\n\n  private updateCurrentData() {\n    if (this.isMounted) {\n      this.forceUpdate();\n    }\n  }\n\n  private prepareObservableQueryOptions() {\n    this.verifyDocumentType(this.getOptions().query, DocumentType.Query);\n    const displayName = this.getOptions().displayName || 'Query';\n\n    return {\n      ...this.getOptions(),\n      displayName,\n      context: this.getOptions().context || {},\n      metadata: { reactComponent: { displayName } }\n    };\n  }\n\n  private observableQueryFields(\n    observable: ObservableQuery<TData, TVariables>\n  ): ObservableQueryFields<TData, TVariables> {\n    return {\n      variables: observable.variables,\n      refetch: observable.refetch.bind(observable),\n      fetchMore: observable.fetchMore.bind(observable),\n      updateQuery: observable.updateQuery.bind(observable),\n      startPolling: observable.startPolling.bind(observable),\n      stopPolling: observable.stopPolling.bind(observable),\n      subscribeToMore: observable.subscribeToMore.bind(observable)\n    } as ObservableQueryFields<TData, TVariables>;\n  }\n\n  private initializeObservableQuery() {\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    if (this.context && this.context.renderPromises) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(\n        this.getOptions()\n      );\n    }\n\n    if (!this.currentObservable.query) {\n      const observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = {\n        ...observableQueryOptions,\n        children: null\n      };\n      this.currentObservable.query = this.refreshClient().client.watchQuery(\n        observableQueryOptions\n      );\n    }\n  }\n\n  private updateObservableQuery() {\n    // If we skipped initially, we may not have yet created the observable\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n    }\n\n    const newObservableQueryOptions = {\n      ...this.prepareObservableQueryOptions(),\n      children: null\n    };\n\n    if (\n      !isEqual(\n        newObservableQueryOptions,\n        this.previousData.observableQueryOptions\n      )\n    ) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable\n        .query!.setOptions(newObservableQueryOptions)\n        // The error will be passed to the child container, so we don't\n        // need to log it here. We could conceivably log something if\n        // an option was set. OTOH we don't log errors w/ the original\n        // query. See https://github.com/apollostack/react-apollo/issues/404\n        .catch(() => {});\n    }\n  }\n\n  private startQuerySubscription() {\n    if (this.currentObservable.subscription) return;\n\n    const obsQuery = this.currentObservable.query!;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: ({ loading, networkStatus, data }) => {\n        if (\n          this.previousData.result &&\n          this.previousData.result.loading === loading &&\n          this.previousData.result.networkStatus === networkStatus &&\n          isEqual(this.previousData.result.data, data || {})\n        ) {\n          return;\n        }\n\n        this.updateCurrentData();\n      },\n      error: error => {\n        this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        this.updateCurrentData();\n      }\n    });\n  }\n\n  private resubscribeToQuery() {\n    this.removeQuerySubscription();\n\n    // Unfortunately, if `lastError` is set in the current\n    // `observableQuery` when the subscription is re-created,\n    // the subscription will immediately receive the error, which will\n    // cause it to terminate again. To avoid this, we first clear\n    // the last error/result from the `observableQuery` before re-starting\n    // the subscription, and restore it afterwards (so the subscription\n    // has a chance to stay open).\n    const lastError = this.currentObservable.query!.getLastError();\n    const lastResult = this.currentObservable.query!.getLastResult();\n    this.currentObservable.query!.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query!, {\n      lastError,\n      lastResult\n    });\n  }\n\n  private getQueryResult(): QueryResult<TData, TVariables> {\n    let result = {\n      data: Object.create(null) as TData\n    } as any;\n\n    // Attach bound methods\n    Object.assign(\n      result,\n      this.observableQueryFields(this.currentObservable.query!)\n    );\n\n    // When skipping a query (ie. we're not querying for data but still want\n    // to render children), make sure the `data` is cleared out and\n    // `loading` is set to `false` (since we aren't loading anything).\n    if (this.getOptions().skip) {\n      result = {\n        ...result,\n        data: undefined,\n        error: undefined,\n        loading: false\n      };\n    } else {\n      // Fetch the current result (if any) from the store.\n      const currentResult = this.currentObservable.query!.getCurrentResult();\n      const { loading, partial, networkStatus, errors } = currentResult;\n      let { error, data } = currentResult;\n      data = data || (Object.create(null) as TData);\n\n      // Until a set naming convention for networkError and graphQLErrors is\n      // decided upon, we map errors (graphQLErrors) to the error options.\n      if (errors && errors.length > 0) {\n        error = new ApolloError({ graphQLErrors: errors });\n      }\n\n      Object.assign(result, { loading, networkStatus, error });\n\n      if (loading) {\n        const previousData = this.previousData.result\n          ? this.previousData.result.data\n          : {};\n        Object.assign(result.data, previousData, data);\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query!.getLastResult() || ({} as any))\n            .data\n        });\n      } else {\n        const { fetchPolicy } = this.currentObservable.query!.options;\n        const { partialRefetch } = this.getOptions();\n        if (\n          partialRefetch &&\n          Object.keys(data).length === 0 &&\n          partial &&\n          fetchPolicy !== 'cache-only'\n        ) {\n          // When a `Query` component is mounted, and a mutation is executed\n          // that returns the same ID as the mounted `Query`, but has less\n          // fields in its result, Apollo Client's `QueryManager` returns the\n          // data as an empty Object since a hit can't be found in the cache.\n          // This can lead to application errors when the UI elements rendered by\n          // the original `Query` component are expecting certain data values to\n          // exist, and they're all of a sudden stripped away. To help avoid\n          // this we'll attempt to refetch the `Query` data.\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        Object.assign(result.data, data);\n      }\n    }\n\n    // When the component is done rendering stored query errors, we'll\n    // remove those errors from the `ObservableQuery` query store, so they\n    // aren't re-displayed on subsequent (potentially error free)\n    // requests/responses.\n    setTimeout(() => {\n      this.currentObservable.query!.resetQueryStoreErrors();\n    });\n\n    result.client = this.client;\n    this.previousData.loading =\n      (this.previousData.result && this.previousData.result.loading) || false;\n    this.previousData.result = result;\n    return result;\n  }\n\n  private handleErrorOrCompleted() {\n    const {\n      data,\n      loading,\n      error\n    } = this.currentObservable.query!.getCurrentResult();\n\n    if (!loading) {\n      const { query, variables, onCompleted, onError } = this.getOptions();\n\n      // No changes, so we won't call onError/onCompleted.\n      if (\n        this.previousOptions &&\n        !this.previousData.loading &&\n        isEqual(this.previousOptions.query, query) &&\n        isEqual(this.previousOptions.variables, variables)\n      ) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data as TData);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  }\n\n  private removeQuerySubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useEffect, useReducer, useRef } from 'react';\nimport {\n  getApolloContext,\n  OperationVariables,\n  QueryResult\n} from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { QueryHookOptions, QueryOptions } from './types';\nimport { QueryData } from './data/QueryData';\n\nexport function useQuery<TData = any, TVariables = OperationVariables>(\n  query: DocumentNode,\n  options?: QueryHookOptions<TData, TVariables>\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [_ignored, forceUpdate] = useReducer(x => x + 1, 0);\n  const updatedOptions = options ? { ...options, query } : { query };\n\n  const queryDataRef = useRef<QueryData<TData, TVariables>>();\n  function getQueryDataRef() {\n    if (!queryDataRef.current) {\n      queryDataRef.current = new QueryData<TData, TVariables>({\n        options: updatedOptions as QueryOptions<TData, TVariables>,\n        context,\n        forceUpdate\n      });\n    }\n    return queryDataRef.current;\n  }\n\n  const queryData = getQueryDataRef();\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  useEffect(() => queryData.afterExecute());\n\n  return queryData.execute();\n}\n","import { ApolloError } from 'apollo-client';\nimport { isEqual } from 'apollo-utilities';\nimport {\n  ApolloContextValue,\n  DocumentType,\n  OperationVariables,\n  ExecutionResult,\n  MutationFunctionOptions,\n  MutationResult\n} from '@apollo/react-common';\n\nimport { MutationOptions, MutationTuple } from '../types';\nimport { OperationData } from './OperationData';\n\nexport class MutationData<\n  TData = any,\n  TVariables = OperationVariables\n> extends OperationData {\n  private mostRecentMutationId: number;\n  private result: MutationResult<TData>;\n  private previousResult?: MutationResult<TData>;\n  private setResult: (result: MutationResult<TData>) => any;\n\n  constructor({\n    options,\n    context,\n    result,\n    setResult\n  }: {\n    options: MutationOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    result: MutationResult<TData>;\n    setResult: (result: MutationResult<TData>) => any;\n  }) {\n    super(options, context);\n    this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    this.result = result;\n    this.setResult = setResult;\n    this.mostRecentMutationId = 0;\n  }\n\n  public execute(result: MutationResult<TData>) {\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    const runMutation = (\n      options?: MutationFunctionOptions<TData, TVariables>\n    ) => this.runMutation(options);\n    return [runMutation, result] as MutationTuple<TData, TVariables>;\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  protected cleanup() {\n    // No cleanup required.\n  }\n\n  private runMutation(\n    mutationFunctionOptions: MutationFunctionOptions<\n      TData,\n      TVariables\n    > = {} as MutationFunctionOptions<TData, TVariables>\n  ) {\n    this.onMutationStart();\n    const mutationId = this.generateNewMutationId();\n\n    return this.mutate(mutationFunctionOptions)\n      .then((response: ExecutionResult<TData>) => {\n        this.onMutationCompleted(response, mutationId);\n        return response;\n      })\n      .catch((error: ApolloError) => {\n        this.onMutationError(error, mutationId);\n        if (!this.getOptions().onError) throw error;\n      });\n  }\n\n  private mutate(\n    mutationFunctionOptions: MutationFunctionOptions<TData, TVariables>\n  ) {\n    const {\n      mutation,\n      variables,\n      optimisticResponse,\n      update,\n      context: mutationContext = {},\n      awaitRefetchQueries = false,\n      fetchPolicy\n    } = this.getOptions();\n    const mutateOptions = { ...mutationFunctionOptions };\n\n    const mutateVariables = Object.assign(\n      {},\n      variables,\n      mutateOptions.variables\n    );\n    delete mutateOptions.variables;\n\n    return this.refreshClient().client.mutate({\n      mutation,\n      optimisticResponse,\n      refetchQueries:\n        mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries,\n      update,\n      context: mutationContext,\n      fetchPolicy,\n      variables: mutateVariables,\n      ...mutateOptions\n    });\n  }\n\n  private onMutationStart() {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  }\n\n  private onMutationCompleted(\n    response: ExecutionResult<TData>,\n    mutationId: number\n  ) {\n    const { onCompleted, ignoreResults } = this.getOptions();\n\n    const { data, errors } = response;\n    const error =\n      errors && errors.length > 0\n        ? new ApolloError({ graphQLErrors: errors })\n        : undefined;\n\n    const callOncomplete = () =>\n      onCompleted ? onCompleted(data as TData) : null;\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data,\n        error\n      });\n    }\n    callOncomplete();\n  }\n\n  private onMutationError(error: ApolloError, mutationId: number) {\n    const { onError } = this.getOptions();\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  }\n\n  private generateNewMutationId(): number {\n    return ++this.mostRecentMutationId;\n  }\n\n  private isMostRecentMutation(mutationId: number) {\n    return this.mostRecentMutationId === mutationId;\n  }\n\n  private updateResult(result: MutationResult<TData>) {\n    if (\n      this.isMounted &&\n      (!this.previousResult || !isEqual(this.previousResult, result))\n    ) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\nimport { DocumentNode } from 'graphql';\n\nimport { MutationHookOptions, MutationTuple } from './types';\nimport { MutationData } from './data/MutationData';\n\nexport function useMutation<TData = any, TVariables = OperationVariables>(\n  mutation: DocumentNode,\n  options?: MutationHookOptions<TData, TVariables>\n): MutationTuple<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({ called: false, loading: false });\n  const updatedOptions = options ? { ...options, mutation } : { mutation };\n\n  const mutationDataRef = useRef<MutationData<TData, TVariables>>();\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        result,\n        setResult\n      });\n    }\n    return mutationDataRef.current;\n  }\n\n  const mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n\n  useEffect(() => mutationData.afterExecute());\n\n  return mutationData.execute(result);\n}\n","import { isEqual } from 'apollo-utilities';\nimport { ApolloContextValue, SubscriptionResult } from '@apollo/react-common';\n\nimport { OperationData } from './OperationData';\nimport { SubscriptionCurrentObservable, SubscriptionOptions } from '../types';\n\nexport class SubscriptionData<\n  TData = any,\n  TVariables = any\n> extends OperationData<SubscriptionOptions<TData, TVariables>> {\n  private setResult: any;\n  private currentObservable: SubscriptionCurrentObservable = {};\n\n  constructor({\n    options,\n    context,\n    setResult\n  }: {\n    options: SubscriptionOptions<TData, TVariables>;\n    context: ApolloContextValue;\n    setResult: any;\n  }) {\n    super(options, context);\n    this.setResult = setResult;\n    this.initialize(options);\n  }\n\n  public execute(result: SubscriptionResult<TData>) {\n    let currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    let { shouldResubscribe } = this.getOptions();\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (\n      shouldResubscribe !== false &&\n      this.previousOptions &&\n      Object.keys(this.previousOptions).length > 0 &&\n      (this.previousOptions.subscription !== this.getOptions().subscription ||\n        !isEqual(this.previousOptions.variables, this.getOptions().variables))\n    ) {\n      this.endSubscription();\n      delete this.currentObservable.query;\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n\n    this.previousOptions = this.getOptions();\n    return { ...currentResult, variables: this.getOptions().variables };\n  }\n\n  public afterExecute() {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  }\n\n  protected cleanup() {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  }\n\n  private initialize(options: SubscriptionOptions<TData, TVariables>) {\n    if (this.currentObservable.query) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  }\n\n  private startSubscription() {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query!.subscribe(\n      {\n        next: this.updateCurrentData.bind(this),\n        error: this.updateError.bind(this),\n        complete: this.completeSubscription.bind(this)\n      }\n    );\n  }\n\n  private getLoadingResult() {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  }\n\n  private updateResult(result: SubscriptionResult) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  }\n\n  private updateCurrentData(result: SubscriptionResult<TData>) {\n    const { onSubscriptionData } = this.getOptions();\n\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  }\n\n  private updateError(error: any) {\n    this.updateResult({\n      error,\n      loading: false\n    });\n  }\n\n  private completeSubscription() {\n    const { onSubscriptionComplete } = this.getOptions();\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  }\n\n  private endSubscription() {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  }\n}\n","import { useContext, useState, useRef, useEffect } from 'react';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, OperationVariables } from '@apollo/react-common';\n\nimport { SubscriptionHookOptions } from './types';\nimport { SubscriptionData } from './data/SubscriptionData';\n\nexport function useSubscription<TData = any, TVariables = OperationVariables>(\n  subscription: DocumentNode,\n  options?: SubscriptionHookOptions<TData, TVariables>\n) {\n  const context = useContext(getApolloContext());\n  const [result, setResult] = useState({\n    loading: true,\n    error: undefined,\n    data: undefined\n  });\n  const updatedOptions = options\n    ? { ...options, subscription }\n    : { subscription };\n\n  const subscriptionDataRef = useRef<SubscriptionData<TData, TVariables>>();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData<TData, TVariables>({\n        options: updatedOptions,\n        context,\n        setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n\n  const subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions);\n  subscriptionData.context = context;\n\n  useEffect(() => subscriptionData.afterExecute());\n\n  return subscriptionData.execute(result);\n}\n","import React from 'react';\nimport { invariant } from 'ts-invariant';\nimport { getApolloContext } from '@apollo/react-common';\nimport ApolloClient from 'apollo-client';\n\nexport function useApolloClient(): ApolloClient<object> {\n  const { client } = React.useContext(getApolloContext());\n  invariant(\n    client,\n    'No Apollo Client instance can be found. Please ensure that you ' +\n      'have called `ApolloProvider` higher up in your tree.'\n  );\n  return client!;\n}\n","import React from 'react';\nimport { ObservableQuery } from 'apollo-client';\nimport { DocumentNode } from 'graphql';\nimport { getApolloContext, ApolloContextValue } from '@apollo/react-common';\n\nimport { QueryData } from '../data/QueryData';\nimport { QueryOptions } from '../types';\n\ntype QueryInfo = {\n  seen: boolean;\n  observable: ObservableQuery<any, any> | null;\n};\n\nfunction makeDefaultQueryInfo(): QueryInfo {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nexport class RenderPromises {\n  // Map from Query component instances to pending fetchData promises.\n  private queryPromises = new Map<QueryOptions<any, any>, Promise<any>>();\n\n  // Two-layered map from (query document, stringified variables) to QueryInfo\n  // objects. These QueryInfo objects are intended to survive through the whole\n  // getMarkupFromTree process, whereas specific Query instances do not survive\n  // beyond a single call to renderToStaticMarkup.\n  private queryInfoTrie = new Map<DocumentNode, Map<string, QueryInfo>>();\n\n  // Registers the server side rendered observable.\n  public registerSSRObservable<TData, TVariables>(\n    observable: ObservableQuery<any, TVariables>,\n    props: QueryOptions<TData, TVariables>\n  ) {\n    this.lookupQueryInfo(props).observable = observable;\n  }\n\n  // Get's the cached observable that matches the SSR Query instances query and variables.\n  public getSSRObservable<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ) {\n    return this.lookupQueryInfo(props).observable;\n  }\n\n  public addQueryPromise<TData, TVariables>(\n    queryInstance: QueryData<TData, TVariables>,\n    finish: () => React.ReactNode\n  ): React.ReactNode {\n    const info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(\n        queryInstance.getOptions(),\n        new Promise(resolve => {\n          resolve(queryInstance.fetchData());\n        })\n      );\n      // Render null to abandon this subtree for this rendering, so that we\n      // can wait for the data to arrive.\n      return null;\n    }\n    return finish();\n  }\n\n  public hasPromises() {\n    return this.queryPromises.size > 0;\n  }\n\n  public consumeAndAwaitPromises() {\n    const promises: Promise<any>[] = [];\n    this.queryPromises.forEach((promise, queryInstance) => {\n      // Make sure we never try to call fetchData for this query document and\n      // these variables again. Since the queryInstance objects change with\n      // every rendering, deduplicating them by query and variables is the\n      // best we can do. If a different Query component happens to have the\n      // same query document and variables, it will be immediately rendered\n      // by calling finish() in addQueryPromise, which could result in the\n      // rendering of an unwanted loading state, but that's not nearly as bad\n      // as getting stuck in an infinite rendering loop because we kept calling\n      // queryInstance.fetchData for the same Query component indefinitely.\n      this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  }\n\n  private lookupQueryInfo<TData, TVariables>(\n    props: QueryOptions<TData, TVariables>\n  ): QueryInfo {\n    const { queryInfoTrie } = this;\n    const { query, variables } = props;\n    const varMap = queryInfoTrie.get(query) || new Map<string, QueryInfo>();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    const variablesString = JSON.stringify(variables);\n    const info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  }\n}\n\nexport function getDataFromTree(\n  tree: React.ReactNode,\n  context: { [key: string]: any } = {}\n) {\n  return getMarkupFromTree({\n    tree,\n    context,\n    // If you need to configure this renderFunction, call getMarkupFromTree\n    // directly instead of getDataFromTree.\n    renderFunction: require('react-dom/server').renderToStaticMarkup\n  });\n}\n\nexport type GetMarkupFromTreeOptions = {\n  tree: React.ReactNode;\n  context?: { [key: string]: any };\n  renderFunction?: (tree: React.ReactElement<any>) => string;\n};\n\nexport function getMarkupFromTree({\n  tree,\n  context = {},\n  // The rendering function is configurable! We use renderToStaticMarkup as\n  // the default, because it's a little less expensive than renderToString,\n  // and legacy usage of getDataFromTree ignores the return value anyway.\n  renderFunction = require('react-dom/server').renderToStaticMarkup\n}: GetMarkupFromTreeOptions): Promise<string> {\n  const renderPromises = new RenderPromises();\n\n  function process(): Promise<string> | string {\n    // Always re-render from the rootElement, even though it might seem\n    // better to render the children of the component responsible for the\n    // promise, because it is not possible to reconstruct the full context\n    // of the original rendering (including all unknown context provider\n    // elements) for a subtree of the original component tree.\n    const ApolloContext = getApolloContext();\n    const html = renderFunction(\n      React.createElement(\n        ApolloContext.Provider,\n        { value: { ...context, renderPromises } },\n        tree\n      )\n    );\n\n    return renderPromises.hasPromises()\n      ? renderPromises.consumeAndAwaitPromises().then(process)\n      : html;\n  }\n\n  return Promise.resolve().then(process);\n}\n","import { ReactElement } from 'react';\nimport { getMarkupFromTree } from './getDataFromTree';\n\nexport function renderToStringWithData(\n  component: ReactElement<any>\n): Promise<string> {\n  return getMarkupFromTree({\n    tree: component,\n    renderFunction: require('react-dom/server').renderToString\n  });\n}\n"]}