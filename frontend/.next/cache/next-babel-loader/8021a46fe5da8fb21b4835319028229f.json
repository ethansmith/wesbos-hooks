{"ast":null,"code":"var _jsxFileName = \"/Users/ethan/Sites/wpx/wesbos-hooks/frontend/components/TakeMyMoney.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport StripeCheckout from \"react-stripe-checkout\";\nimport { Mutation } from \"react-apollo\";\nimport Router from \"next/router\";\nimport NProgress from \"nprogress\";\nimport gql from \"graphql-tag\";\nimport calcTotalPrice from \"../lib/calcTotalPrice\";\nimport Error from \"./ErrorMessage\";\nimport User, { CURRENT_USER_QUERY } from \"./User\";\nconst CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`;\n\nconst TakeMyMoney = props => {\n  const totalItems = me => me.cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0);\n\n  const onToken = async (res, createOrder) => {\n    NProgress.start(); // manually call the mutation once we have the stripe token\n\n    const order = await createOrder({\n      variables: {\n        token: res.id\n      }\n    }).catch(err => {\n      alert(err.message);\n    });\n    Router.push({\n      pathname: '/order',\n      query: {\n        id: order.data.createOrder.id\n      }\n    });\n  };\n\n  return __jsx(User, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, ({\n    data: {\n      me\n    }\n  }) => __jsx(Mutation, {\n    mutation: CREATE_ORDER_MUTATION,\n    refetchQueries: [{\n      query: CURRENT_USER_QUERY\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, createOrder => __jsx(StripeCheckout, {\n    amount: calcTotalPrice(me.cart),\n    name: \"Sick Fits\",\n    description: `Your order of ${totalItems(me)} items`,\n    stripeKey: \"pk_test_s5G4igMtK9KvmQtbRd0L18yR00ALa4imnQ\",\n    image: me.cart.length && me.cart[0].item && me.cart[0].item.image,\n    currency: \"USD\",\n    email: me.email,\n    token: res => onToken(res, createOrder),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, props.children)));\n};\n\nexport default TakeMyMoney;","map":{"version":3,"sources":["/Users/ethan/Sites/wpx/wesbos-hooks/frontend/components/TakeMyMoney.js"],"names":["StripeCheckout","Mutation","Router","NProgress","gql","calcTotalPrice","Error","User","CURRENT_USER_QUERY","CREATE_ORDER_MUTATION","TakeMyMoney","props","totalItems","me","cart","reduce","tally","cartItem","quantity","onToken","res","createOrder","start","order","variables","token","id","catch","err","alert","message","push","pathname","query","data","length","item","image","email","children"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,uBAA3B;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,IAAP,IAAeC,kBAAf,QAAyC,QAAzC;AAGA,MAAMC,qBAAqB,GAAGL,GAAI;;;;;;;;;;;;CAAlC;;AAcA,MAAMM,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAMC,UAAU,GAAGC,EAAE,IACnBA,EAAE,CAACC,IAAH,CAAQC,MAAR,CAAe,CAACC,KAAD,EAAQC,QAAR,KAAqBD,KAAK,GAAGC,QAAQ,CAACC,QAArD,EAA+D,CAA/D,CADF;;AAGA,QAAMC,OAAO,GAAG,OAAOC,GAAP,EAAYC,WAAZ,KAA4B;AAC1ClB,IAAAA,SAAS,CAACmB,KAAV,GAD0C,CAE1C;;AAEA,UAAMC,KAAK,GAAG,MAAMF,WAAW,CAAC;AAC5BG,MAAAA,SAAS,EAAE;AACPC,QAAAA,KAAK,EAAEL,GAAG,CAACM;AADJ;AADiB,KAAD,CAAX,CAIjBC,KAJiB,CAIXC,GAAG,IAAI;AACZC,MAAAA,KAAK,CAACD,GAAG,CAACE,OAAL,CAAL;AACH,KANmB,CAApB;AAQA5B,IAAAA,MAAM,CAAC6B,IAAP,CAAY;AACVC,MAAAA,QAAQ,EAAE,QADA;AAEVC,MAAAA,KAAK,EAAE;AAACP,QAAAA,EAAE,EAAEH,KAAK,CAACW,IAAN,CAAWb,WAAX,CAAuBK;AAA5B;AAFG,KAAZ;AAID,GAhBD;;AAkBA,SACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC;AAAEQ,IAAAA,IAAI,EAAE;AAAErB,MAAAA;AAAF;AAAR,GAAD,KACC,MAAC,QAAD;AACI,IAAA,QAAQ,EAAEJ,qBADd;AAEI,IAAA,cAAc,EAAE,CAAC;AAACwB,MAAAA,KAAK,EAAEzB;AAAR,KAAD,CAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIGa,WAAW,IACV,MAAC,cAAD;AACE,IAAA,MAAM,EAAEhB,cAAc,CAACQ,EAAE,CAACC,IAAJ,CADxB;AAEE,IAAA,IAAI,EAAC,WAFP;AAGE,IAAA,WAAW,EAAG,iBAAgBF,UAAU,CAACC,EAAD,CAAK,QAH/C;AAIE,IAAA,SAAS,EAAC,4CAJZ;AAKE,IAAA,KAAK,EAAEA,EAAE,CAACC,IAAH,CAAQqB,MAAR,IAAkBtB,EAAE,CAACC,IAAH,CAAQ,CAAR,EAAWsB,IAA7B,IAAqCvB,EAAE,CAACC,IAAH,CAAQ,CAAR,EAAWsB,IAAX,CAAgBC,KAL9D;AAME,IAAA,QAAQ,EAAC,KANX;AAOE,IAAA,KAAK,EAAExB,EAAE,CAACyB,KAPZ;AAQE,IAAA,KAAK,EAAElB,GAAG,IAAID,OAAO,CAACC,GAAD,EAAMC,WAAN,CARvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGV,KAAK,CAAC4B,QAVT,CALJ,CAFJ,CADF;AAyBD,CA/CD;;AAiDA,eAAe7B,WAAf","sourcesContent":["import StripeCheckout from \"react-stripe-checkout\"\nimport { Mutation } from \"react-apollo\"\nimport Router from \"next/router\"\nimport NProgress from \"nprogress\"\nimport gql from \"graphql-tag\"\nimport calcTotalPrice from \"../lib/calcTotalPrice\"\nimport Error from \"./ErrorMessage\"\nimport User, { CURRENT_USER_QUERY } from \"./User\"\n\n\nconst CREATE_ORDER_MUTATION = gql`\n  mutation CREATE_ORDER_MUTATION($token: String!) {\n    createOrder(token: $token) {\n      id\n      charge\n      total\n      items {\n        id\n        title\n      }\n    }\n  }\n`\n\nconst TakeMyMoney = props => {\n  const totalItems = me =>\n    me.cart.reduce((tally, cartItem) => tally + cartItem.quantity, 0)\n\n  const onToken = async (res, createOrder) => {\n    NProgress.start()\n    // manually call the mutation once we have the stripe token\n\n    const order = await createOrder({\n        variables: {\n            token: res.id\n        }\n    }).catch(err => {\n        alert(err.message)\n    })\n\n    Router.push({\n      pathname: '/order',\n      query: {id: order.data.createOrder.id}\n    })\n  }\n\n  return (\n    <User>\n      {({ data: { me } }) => (\n        <Mutation\n            mutation={CREATE_ORDER_MUTATION}\n            refetchQueries={[{query: CURRENT_USER_QUERY}]}\n        >\n          {createOrder => (\n            <StripeCheckout\n              amount={calcTotalPrice(me.cart)}\n              name=\"Sick Fits\"\n              description={`Your order of ${totalItems(me)} items`}\n              stripeKey=\"pk_test_s5G4igMtK9KvmQtbRd0L18yR00ALa4imnQ\"\n              image={me.cart.length && me.cart[0].item && me.cart[0].item.image }\n              currency=\"USD\"\n              email={me.email}\n              token={res => onToken(res, createOrder)}\n            >\n              {props.children}\n            </StripeCheckout>\n          )}\n        </Mutation>\n      )}\n    </User>\n  )\n}\n\nexport default TakeMyMoney\n"]},"metadata":{},"sourceType":"module"}