{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/ethan/Sites/wpx/wesbos-hooks/frontend/components/Search.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from \"react\";\nimport Downshift, { resetIdCounter } from \"downshift\";\nimport { ApolloConsumer } from \"react-apollo\";\nimport debounce from \"lodash.debounce\";\nimport gql from \"graphql-tag\";\nimport Router from \"next/router\";\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\";\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { description_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      image\n      title\n    }\n  }\n`;\n\nconst routeToItem = item => {\n  Router.push({\n    pathname: '/item',\n    query: {\n      id: item.id\n    }\n  });\n};\n\nconst AutoComplete = props => {\n  const {\n    0: items,\n    1: setItems\n  } = useState([]);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const onChange = debounce(async (e, client) => {\n    setLoading(true); // manually query apollo client\n\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: {\n        searchTerm: e.target.value\n      }\n    });\n    setItems(res.data.items);\n    setLoading(false);\n  }, 100);\n  resetIdCounter();\n  return __jsx(SearchStyles, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(Downshift, {\n    onChange: routeToItem,\n    itemToString: item => item === null ? \"\" : item.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, ({\n    getInputProps,\n    getItemProps,\n    isOpen,\n    inputValue,\n    highlightedIndex\n  }) => __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, __jsx(ApolloConsumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, client => __jsx(\"input\", _extends({}, getInputProps({\n    type: \"search\",\n    placeholder: \"Search for An Item\",\n    id: \"search\",\n    className: loading ? \"loading\" : \"\",\n    onChange: e => {\n      e.persist();\n      onChange(e, client);\n    }\n  }), {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }))), isOpen && __jsx(DropDown, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, items.map((item, index) => __jsx(DropDownItem, _extends({}, getItemProps({\n    item\n  }), {\n    key: item.id,\n    highlighted: index === highlightedIndex,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), __jsx(\"img\", {\n    width: \"50\",\n    src: item.image,\n    alt: item.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, item.title))), !items.length && loading === false && __jsx(DropDownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, \"Nothing found for \", inputValue)))));\n};\n\nexport default AutoComplete;","map":{"version":3,"sources":["/Users/ethan/Sites/wpx/wesbos-hooks/frontend/components/Search.js"],"names":["useState","Downshift","resetIdCounter","ApolloConsumer","debounce","gql","Router","DropDown","DropDownItem","SearchStyles","SEARCH_ITEMS_QUERY","routeToItem","item","push","pathname","query","id","AutoComplete","props","items","setItems","loading","setLoading","onChange","e","client","res","variables","searchTerm","target","value","data","title","getInputProps","getItemProps","isOpen","inputValue","highlightedIndex","type","placeholder","className","persist","map","index","image","length"],"mappings":"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","sourcesContent":["import { useState } from \"react\"\nimport Downshift, {resetIdCounter} from \"downshift\"\nimport { ApolloConsumer } from \"react-apollo\"\nimport debounce from \"lodash.debounce\"\nimport gql from \"graphql-tag\"\nimport Router from \"next/router\"\nimport { DropDown, DropDownItem, SearchStyles } from \"./styles/DropDown\"\n\nconst SEARCH_ITEMS_QUERY = gql`\n  query SEARCH_ITEMS_QUERY($searchTerm: String!) {\n    items(\n      where: {\n        OR: [\n          { title_contains: $searchTerm }\n          { description_contains: $searchTerm }\n        ]\n      }\n    ) {\n      id\n      image\n      title\n    }\n  }\n`\n\nconst routeToItem = item => {\n    Router.push({\n        pathname: '/item',\n        query: {\n            id: item.id\n        }\n    })\n}\n\nconst AutoComplete = props => {\n  const [items, setItems] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  const onChange = debounce(async (e, client) => {\n    setLoading(true)\n\n    // manually query apollo client\n    const res = await client.query({\n      query: SEARCH_ITEMS_QUERY,\n      variables: { searchTerm: e.target.value }\n    })\n    setItems(res.data.items)\n    setLoading(false)\n  }, 100)\n  \n  resetIdCounter()\n  return (\n    <SearchStyles>\n      <Downshift onChange={routeToItem} itemToString={item => (item === null) ? \"\" : item.title}>\n        {({\n          getInputProps,\n          getItemProps,\n          isOpen,\n          inputValue,\n          highlightedIndex\n        }) => (\n          <div>\n            <ApolloConsumer>\n              {client => (\n                <input\n                  {...getInputProps({\n                    type: \"search\",\n                    placeholder: \"Search for An Item\",\n                    id: \"search\",\n                    className: loading ? \"loading\" : \"\",\n                    onChange: e => {\n                      e.persist()\n                      onChange(e, client)\n                    }\n                  })}\n                />\n              )}\n            </ApolloConsumer>\n            {isOpen && (\n              <DropDown>\n                {items.map((item, index) => (\n                  <DropDownItem \n                  {...getItemProps({item})}\n                  key={item.id} highlighted={index === highlightedIndex}>\n                    <img width=\"50\" src={item.image} alt={item.title} />\n                    <p>{item.title}</p>\n                  </DropDownItem>\n                ))}\n                {!items.length && (loading === false) && <DropDownItem>Nothing found for {inputValue}</DropDownItem>}\n              </DropDown>\n            )}\n          </div>\n        )}\n      </Downshift>\n    </SearchStyles>\n  )\n}\n\nexport default AutoComplete\n"]},"metadata":{},"sourceType":"module"}