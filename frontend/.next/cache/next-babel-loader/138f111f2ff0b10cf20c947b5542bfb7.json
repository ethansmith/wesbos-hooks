{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/ethan/Sites/wpx/wesbos-hooks-now/frontend/components/CreateItem.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation CREATE_ITEM_MUTATION(\\n    $title: String!\\n    $description: String!\\n    $price: Int!\\n    $image: String\\n    $largeImage: String\\n  ) {\\n    createItem(\\n      title: $title\\n      description: $description\\n      price: $price\\n      image: $image\\n      largeImage: $largeImage\\n    ) {\\n      id\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport gql from 'graphql-tag';\nimport Router from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\nimport ErrorMessage from './ErrorMessage';\nimport Form from './styles/Form';\n\nvar getColor = function getColor(props) {\n  if (props.isDragAccept) {\n    return '#00e676';\n  }\n\n  if (props.isDragReject) {\n    return '#ff1744';\n  }\n\n  if (props.isDragActive) {\n    return '#2196f3';\n  }\n\n  return '#eeeeee';\n};\n\nvar thumbsContainer = {\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  marginTop: 16\n};\nvar thumb = {\n  display: 'inline-flex',\n  borderRadius: 2,\n  border: '1px solid #eaeaea',\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: 'border-box'\n};\nvar thumbInner = {\n  display: 'flex',\n  minWidth: 0,\n  overflow: 'hidden'\n};\nvar img = {\n  display: 'block',\n  width: 'auto',\n  height: '100%'\n};\nvar Dropzone = styled.div.withConfig({\n  displayName: \"CreateItem__Dropzone\",\n  componentId: \"cxl74w-0\"\n})([\"flex:1;display:flex;flex-direction:column;align-items:center;padding:20px;border-width:2px;border-radius:2px;border-color:\", \";border-style:dashed;background-color:#fafafa;color:#bdbdbd;outline:none;transition:border 0.24s ease-in-out;\"], function (props) {\n  return getColor(props);\n});\nvar CREATE_ITEM_MUTATION = gql(_templateObject());\n\nvar CreateItem = function CreateItem(props) {\n  var _useState = useState([]),\n      files = _useState[0],\n      setFiles = _useState[1];\n\n  var _useDropzone = useDropzone({\n    accept: 'image/*',\n    onDrop: function onDrop(acceptedFiles) {\n      setFiles(acceptedFiles.map(function (file) {\n        return _Object$assign(file, {\n          preview: URL.createObjectURL(file)\n        });\n      }));\n      uploadFileToCloudinary(acceptedFiles);\n    }\n  }),\n      getRootProps = _useDropzone.getRootProps,\n      getInputProps = _useDropzone.getInputProps,\n      isDragActive = _useDropzone.isDragActive,\n      isDragAccept = _useDropzone.isDragAccept,\n      isDragReject = _useDropzone.isDragReject;\n\n  var thumbs = files.map(function (file) {\n    return __jsx(\"div\", {\n      style: thumb,\n      key: file.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      style: thumbInner,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, __jsx(\"img\", {\n      src: file.preview,\n      style: img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })));\n  });\n  useEffect(function () {\n    return function () {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach(function (file) {\n        return URL.revokeObjectURL(file.preview);\n      });\n    };\n  }, [files]);\n\n  var _useState2 = useState(''),\n      theTitle = _useState2[0],\n      setTheTitle = _useState2[1];\n\n  var _useState3 = useState(''),\n      thePrice = _useState3[0],\n      setThePrice = _useState3[1];\n\n  var _useState4 = useState(''),\n      theDescription = _useState4[0],\n      setTheDescription = _useState4[1];\n\n  var _useState5 = useState(''),\n      theImage = _useState5[0],\n      setTheImage = _useState5[1];\n\n  var _useState6 = useState(''),\n      theLargeImage = _useState6[0],\n      setTheLargeImage = _useState6[1];\n\n  var _useState7 = useState(false),\n      uploading = _useState7[0],\n      setUploading = _useState7[1]; // const uploadFile = async e => {\n  //   const data = new FormData();\n  //   data.append('file', e.target.files[0]);\n  //   data.append('upload_preset', 'sickfits');\n  //   setUploading(true);\n  //   const res = await fetch(\n  //     'https://api.cloudinary.com/v1_1/dxegnq95q/image/upload',\n  //     {\n  //       method: 'POST',\n  //       body: data,\n  //     }\n  //   );\n  //   const theFile = await res.json();\n  //   console.log(theFile);\n  //   setUploading(false);\n  //   setTheImage(theFile.secure_url);\n  //   setTheLargeImage(theFile.eager[0].secure_url);\n  // };\n\n\n  var uploadFileToCloudinary =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(files) {\n      var data, res, theFile;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              data = new FormData(); // TODO: accept multiple files\n\n              data.append('file', files[0]);\n              data.append('upload_preset', 'sickfits');\n              setUploading(true);\n              _context.next = 6;\n              return fetch('https://api.cloudinary.com/v1_1/dxegnq95q/image/upload', {\n                method: 'POST',\n                body: data\n              });\n\n            case 6:\n              res = _context.sent;\n              _context.next = 9;\n              return res.json();\n\n            case 9:\n              theFile = _context.sent;\n              console.log(theFile);\n              setUploading(false);\n              setTheImage(theFile.secure_url);\n              setTheLargeImage(theFile.eager[0].secure_url);\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function uploadFileToCloudinary(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(Mutation, {\n    mutation: CREATE_ITEM_MUTATION,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, function (createItem, _ref2) {\n    var loading = _ref2.loading,\n        error = _ref2.error;\n    return __jsx(Form, {\n      onSubmit:\n      /*#__PURE__*/\n      function () {\n        var _ref3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(e) {\n          var res;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  // Stop the form from submitting\n                  e.preventDefault(); // call the mutation\n\n                  _context2.next = 3;\n                  return createItem({\n                    variables: {\n                      title: theTitle,\n                      price: _parseInt(thePrice),\n                      description: theDescription,\n                      image: theImage,\n                      largeImage: theLargeImage\n                    }\n                  });\n\n                case 3:\n                  res = _context2.sent;\n                  // change them to the single item page\n                  Router.push({\n                    pathname: '/item',\n                    query: {\n                      id: res.data.createItem.id\n                    }\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x2) {\n          return _ref3.apply(this, arguments);\n        };\n      }(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, __jsx(ErrorMessage, {\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }), __jsx(\"fieldset\", {\n      disabled: loading,\n      \"aria-busy\": loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, __jsx(Dropzone, _extends({}, getRootProps({\n      isDragActive: isDragActive,\n      isDragAccept: isDragAccept,\n      isDragReject: isDragReject\n    }, {\n      className: 'dropzone'\n    }), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }), __jsx(\"input\", _extends({}, getInputProps(), {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    })), __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, \"Drag 'n' drop some files here, or click to select files\")), __jsx(\"aside\", {\n      style: thumbsContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, thumbs, uploading && __jsx(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"Uploading...\")), __jsx(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"Title\", __jsx(\"input\", {\n      type: \"text\",\n      id: \"title\",\n      name: \"title\",\n      placeholder: \"Title\",\n      autoComplete: \"off\",\n      required: true,\n      value: theTitle,\n      onChange: function onChange(e) {\n        return setTheTitle(e.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    })), __jsx(\"label\", {\n      htmlFor: \"Price\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, \"Price\", __jsx(\"input\", {\n      type: \"number\",\n      id: \"Price\",\n      name: \"Price\",\n      placeholder: \"Price\",\n      required: true,\n      value: thePrice,\n      onChange: function onChange(e) {\n        return setThePrice(e.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    })), __jsx(\"label\", {\n      htmlFor: \"Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"Description\", __jsx(\"textarea\", {\n      id: \"Description\",\n      name: \"Description\",\n      placeholder: \"Enter a Description\",\n      required: true,\n      value: theDescription,\n      onChange: function onChange(e) {\n        return setTheDescription(e.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    })), __jsx(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, \"Submit!\")));\n  });\n};\n\nexport default CreateItem;\nexport { CREATE_ITEM_MUTATION };","map":{"version":3,"sources":["/Users/ethan/Sites/wpx/wesbos-hooks-now/frontend/components/CreateItem.js"],"names":["gql","Router","useEffect","useState","Mutation","useDropzone","styled","ErrorMessage","Form","getColor","props","isDragAccept","isDragReject","isDragActive","thumbsContainer","display","flexDirection","flexWrap","marginTop","thumb","borderRadius","border","marginBottom","marginRight","width","height","padding","boxSizing","thumbInner","minWidth","overflow","img","Dropzone","div","CREATE_ITEM_MUTATION","CreateItem","files","setFiles","accept","onDrop","acceptedFiles","map","file","preview","URL","createObjectURL","uploadFileToCloudinary","getRootProps","getInputProps","thumbs","name","forEach","revokeObjectURL","theTitle","setTheTitle","thePrice","setThePrice","theDescription","setTheDescription","theImage","setTheImage","theLargeImage","setTheLargeImage","uploading","setUploading","data","FormData","append","fetch","method","body","res","json","theFile","console","log","secure_url","eager","createItem","loading","error","e","preventDefault","variables","title","price","description","image","largeImage","push","pathname","query","id","className","target","value"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport Router from 'next/router';\nimport { useEffect, useState } from 'react';\nimport { Mutation } from 'react-apollo';\nimport { useDropzone } from 'react-dropzone';\nimport styled from 'styled-components';\nimport ErrorMessage from './ErrorMessage';\nimport Form from './styles/Form';\n\nconst getColor = props => {\n  if (props.isDragAccept) {\n    return '#00e676';\n  }\n  if (props.isDragReject) {\n    return '#ff1744';\n  }\n  if (props.isDragActive) {\n    return '#2196f3';\n  }\n  return '#eeeeee';\n};\n\nconst thumbsContainer = {\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n  marginTop: 16,\n};\n\nconst thumb = {\n  display: 'inline-flex',\n  borderRadius: 2,\n  border: '1px solid #eaeaea',\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: 'border-box',\n};\n\nconst thumbInner = {\n  display: 'flex',\n  minWidth: 0,\n  overflow: 'hidden',\n};\n\nconst img = {\n  display: 'block',\n  width: 'auto',\n  height: '100%',\n};\n\nconst Dropzone = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${props => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #bdbdbd;\n  outline: none;\n  transition: border 0.24s ease-in-out;\n`;\n\nconst CREATE_ITEM_MUTATION = gql`\n  mutation CREATE_ITEM_MUTATION(\n    $title: String!\n    $description: String!\n    $price: Int!\n    $image: String\n    $largeImage: String\n  ) {\n    createItem(\n      title: $title\n      description: $description\n      price: $price\n      image: $image\n      largeImage: $largeImage\n    ) {\n      id\n    }\n  }\n`;\n\nconst CreateItem = props => {\n  const [files, setFiles] = useState([]);\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    isDragAccept,\n    isDragReject,\n  } = useDropzone({\n    accept: 'image/*',\n    onDrop: acceptedFiles => {\n      setFiles(\n        acceptedFiles.map(file =>\n          Object.assign(file, {\n            preview: URL.createObjectURL(file),\n          })\n        )\n      );\n      uploadFileToCloudinary(acceptedFiles);\n    },\n  });\n\n  const thumbs = files.map(file => (\n    <div style={thumb} key={file.name}>\n      <div style={thumbInner}>\n        <img src={file.preview} style={img} />\n      </div>\n    </div>\n  ));\n\n  useEffect(\n    () => () => {\n      // Make sure to revoke the data uris to avoid memory leaks\n      files.forEach(file => URL.revokeObjectURL(file.preview));\n    },\n    [files]\n  );\n\n  const [theTitle, setTheTitle] = useState('');\n  const [thePrice, setThePrice] = useState('');\n  const [theDescription, setTheDescription] = useState('');\n  const [theImage, setTheImage] = useState('');\n  const [theLargeImage, setTheLargeImage] = useState('');\n  const [uploading, setUploading] = useState(false);\n\n  // const uploadFile = async e => {\n  //   const data = new FormData();\n\n  //   data.append('file', e.target.files[0]);\n  //   data.append('upload_preset', 'sickfits');\n\n  //   setUploading(true);\n\n  //   const res = await fetch(\n  //     'https://api.cloudinary.com/v1_1/dxegnq95q/image/upload',\n  //     {\n  //       method: 'POST',\n  //       body: data,\n  //     }\n  //   );\n\n  //   const theFile = await res.json();\n\n  //   console.log(theFile);\n\n  //   setUploading(false);\n\n  //   setTheImage(theFile.secure_url);\n\n  //   setTheLargeImage(theFile.eager[0].secure_url);\n  // };\n\n  const uploadFileToCloudinary = async files => {\n    const data = new FormData();\n\n    // TODO: accept multiple files\n    data.append('file', files[0]);\n    data.append('upload_preset', 'sickfits');\n\n    setUploading(true);\n\n    const res = await fetch(\n      'https://api.cloudinary.com/v1_1/dxegnq95q/image/upload',\n      {\n        method: 'POST',\n        body: data,\n      }\n    );\n\n    const theFile = await res.json();\n\n    console.log(theFile);\n\n    setUploading(false);\n\n    setTheImage(theFile.secure_url);\n\n    setTheLargeImage(theFile.eager[0].secure_url);\n  };\n\n  return (\n    <Mutation mutation={CREATE_ITEM_MUTATION}>\n      {(createItem, { loading, error }) => (\n        <Form\n          onSubmit={async e => {\n            // Stop the form from submitting\n            e.preventDefault();\n            // call the mutation\n            const res = await createItem({\n              variables: {\n                title: theTitle,\n                price: parseInt(thePrice),\n                description: theDescription,\n                image: theImage,\n                largeImage: theLargeImage,\n              },\n            });\n            // change them to the single item page\n            Router.push({\n              pathname: '/item',\n              query: { id: res.data.createItem.id },\n            });\n          }}\n        >\n          <ErrorMessage error={error} />\n\n          <fieldset disabled={loading} aria-busy={loading}>\n            {/* <label htmlFor=\"file\">\n              Image\n              <input\n                type=\"file\"\n                id=\"file\"\n                name=\"file\"\n                placeholder=\"Upload an image\"\n                required\n                onChange={e => uploadFile(e)}\n              />\n              {uploading && <p>Uploading...</p>}\n              {theImage && (\n                <img width=\"200\" src={theImage} alt=\"Upload Preview\" />\n              )}\n            </label> */}\n\n            <Dropzone\n              {...getRootProps(\n                { isDragActive, isDragAccept, isDragReject },\n                { className: 'dropzone' }\n              )}\n            >\n              <input {...getInputProps()} />\n              <p>Drag 'n' drop some files here, or click to select files</p>\n            </Dropzone>\n            <aside style={thumbsContainer}>\n              {thumbs}\n              {uploading && <p>Uploading...</p>}\n            </aside>\n\n            <label htmlFor=\"title\">\n              Title\n              <input\n                type=\"text\"\n                id=\"title\"\n                name=\"title\"\n                placeholder=\"Title\"\n                autoComplete=\"off\"\n                required\n                value={theTitle}\n                onChange={e => setTheTitle(e.target.value)}\n              />\n            </label>\n\n            <label htmlFor=\"Price\">\n              Price\n              <input\n                type=\"number\"\n                id=\"Price\"\n                name=\"Price\"\n                placeholder=\"Price\"\n                required\n                value={thePrice}\n                onChange={e => setThePrice(e.target.value)}\n              />\n            </label>\n\n            <label htmlFor=\"Description\">\n              Description\n              <textarea\n                id=\"Description\"\n                name=\"Description\"\n                placeholder=\"Enter a Description\"\n                required\n                value={theDescription}\n                onChange={e => setTheDescription(e.target.value)}\n              />\n            </label>\n            <button type=\"submit\">Submit!</button>\n          </fieldset>\n        </Form>\n      )}\n    </Mutation>\n  );\n};\n\nexport default CreateItem;\n\nexport { CREATE_ITEM_MUTATION };\n"]},"metadata":{},"sourceType":"module"}